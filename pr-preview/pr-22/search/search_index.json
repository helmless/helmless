{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"_partials/architectur-diagram/","title":"Architectur diagram","text":"<pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"_partials/getting-started_grid/","title":"Getting started grid","text":"<ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"_partials/wip/","title":"Wip","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p>"},{"location":"discord/","title":"Discord","text":"<p>Join the Helmless Discord community.</p>"},{"location":"docs/","title":"Helmless Documentation","text":"Welcome \ud83d\udc4b\ud83c\udffb   So glad you're here!"},{"location":"docs/#welcome-to-helmless","title":"Welcome to Helmless","text":"<p>Helmless is a workflow and collection of resources that allows you to deploy serverless containers to Google Cloud Run, and potentially other platforms (1), with Helm, bypassing the complexity of Kubernetes and Terraform.</p> <ol> <li> See the extending to other platforms page for more information.</li> </ol> <p>It takes a container specification in the form of a Helm chart and a values file, and uses the templating feature of Helm to generate a Cloud Run manifest. This manifest is then deployed using the <code>gcloud</code> CLI.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre> <p>Helmless gives you a powerful serverless deployment workflow that is very simple to use, yet flexible and extensible. It can be easily integrated into your existing CI/CD pipeline and is fully compatible with Helm charts and all tooling surrounding it.</p> <ul> <li> <p> Why Helmless?</p> <p>Not convinced yet? Learn why you should use Helmless and why it's different from other tools.</p> <p> Learn the WHY</p> </li> <li> <p> Helmless Architecture</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Understand the Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience and deploy your first service to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations, including a complete CI/CD pipeline.</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/architecture/","title":"Helmless Architecture","text":"<p>In a nutshell, Helmless is a workflow for templating a custom Helm chart into the cloud provider's specific configuration, and then deploying it using the cloud provider's CLI.</p> <p>Simple but very powerful and adoptable to every cloud provider and CI/CD platform.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"docs/architecture/#google-cloud-run","title":"Google Cloud Run","text":"<p>Helmless has been battle tested internally using Google Cloud Run and serves hundreds of containers and production deployments every day. That's why the documentation focuses on Google Cloud Run and it currently is the only platform supported out of the box.</p> <p>Google Cloud Run is a fully managed container platform that allows you to deploy and scale your containers in a serverless way. Under the hood it uses the Knative to provide it's serverless platform. In the Google Cloud Run documentation you can find the full YAML specification that is templated by our Google Cloud Run Helmless chart.</p>"},{"location":"docs/architecture/#extending-to-other-platforms","title":"Extending to other platforms","text":"<p>Other cloud providers offer their own serverless platforms, like AWS ECS, AWS Fargate, Azure Container Apps, etc. which all support their own YAML specifications.</p> <p>AWS for example offers to use AWS CloudFormation to template your infrastructure as code. By creating a custom Helmless chart that renders into the AWS CloudFormation YAML specification, you can easily deploy your container to AWS as well.</p> <p>Contributing other platforms</p> <p>If you want to extend Helmless to other platforms, we kindly ask you to get in touch and contribute to the project.</p> <ul> <li> <p> What is Helmless?</p> <p>Learn the core concepts and understand how Helmless simplifies serverless deployments</p> <p> Learn More</p> </li> <li> <p> How does it work?</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience deploying to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/conventions/","title":"Conventions","text":"<p>This section explains several conventions used in the chart schema documentation.</p>"},{"location":"docs/conventions/#symbols","title":"Symbols","text":"<p>This documentation use some symbols for illustration purposes. Before you read on, please make sure you've made yourself familiar with the following list of conventions:</p>"},{"location":"docs/conventions/#version","title":"\u2013 Version","text":"<p>The tag symbol in conjunction with a version number denotes when a specific feature or behavior was added. Make sure you're at least on this version if you want to use it.</p>"},{"location":"docs/conventions/#default","title":"\u2013 Default value","text":"<p>Some properties in the schemas have default values. The default value of the property is always included.</p>"},{"location":"docs/conventions/#default","title":"\u2013 Default value is computed","text":"<p>Some default values are not set to static values but computed from other values.</p>"},{"location":"docs/conventions/#default","title":"\u2013 Default value is empty","text":"<p>Some properties do not contain default values. This means that the functionality that is associated with them is not available unless explicitly enabled.</p>"},{"location":"docs/conventions/#feature","title":"\u2013 Optional feature","text":"<p>Some features are optional and must be explicitly enabled by setting the property.</p>"},{"location":"docs/conventions/#experimental","title":"\u2013 Experimental","text":"<p>Some newer features are still considered experimental, which means they might (although rarely) change at any time, including their complete removal.</p>"},{"location":"docs/conventions/#required","title":"\u2013 Required value","text":"<p>Some properties are required, which means they must be explicitly set in the <code>values.yaml</code>.</p>"},{"location":"docs/conventions/#type","title":"\u2013 Type","text":"<p>All properties have a type, for example <code>string</code>, <code>boolean</code>, <code>object</code>, etc.</p>"},{"location":"docs/conventions/#enum","title":"\u2013 Enumeration","text":"<p>Some properties have a set of allowed values, which are listed in the <code>enum</code> property.</p>"},{"location":"docs/conventions/#deprecated","title":"\u2013 Deprecated","text":"<p>Some features or properties are deprecated, which means they are no longer recommended for use and may be removed in future versions. It is advised to avoid using deprecated features and to update your configuration to use the recommended alternatives.</p>"},{"location":"docs/conventions/#min-length","title":"\u2013 Minimum Length","text":"<p>Some properties have a minimum length constraint. This means that the value of the property must be at least the specified length.</p>"},{"location":"docs/conventions/#max-length","title":"\u2013 Maximum Length","text":"<p>Some properties have a maximum length constraint. This means that the value of the property must not exceed the specified length.</p>"},{"location":"docs/conventions/#pattern","title":"\u2013 Pattern","text":"<p>Some properties have a pattern constraint. This means that the value of the property must match the specified pattern.</p>"},{"location":"docs/core-concepts/","title":"Core Concepts","text":"<p>As Helmless is built on top of Helm, it shares the same core concepts, but with some differences and new features specific to serverless deployments.</p>"},{"location":"docs/core-concepts/#helmless-charts","title":"Helmless Charts","text":"<p>Helmless charts template your values into cloud-provider specific formats. They handle:</p> <ul> <li>Resource configuration</li> <li>Environment variables</li> <li>Secrets and volumes mapping</li> <li>Scaling rules</li> </ul>"},{"location":"docs/core-concepts/#values-files","title":"Values Files","text":"<p>Like Helm, Helmless uses <code>values.yaml</code> files to configure your deployments. These files define everything about your service:</p> <pre><code>name: my-service\nimage: us-docker.pkg.dev/cloudrun/container/hello:latest\nenv:\n  API_KEY: secret\n</code></pre>"},{"location":"docs/core-concepts/#deployment-actions","title":"Deployment Actions","text":"<p>Helmless provides deployment tools that:</p> <ul> <li>Template your values</li> <li>Validate configurations</li> <li>Deploy to your cloud provider</li> </ul>"},{"location":"docs/faq/","title":"FAQ","text":""},{"location":"docs/faq/#why-use-helm","title":"Why use Helm?","text":"<p>Helm is a great tool for managing containerized applications, and its templating feature offers a great developer experience. It allows you to define your application container specification in a very simple YAML file and gives the platform teams an easy way to add abstractions and customizations on top of it, making container-based deployments a breeze.</p> <p>However by default Helm is built for Kubernetes, which brings a lot of overhead and complexity for container-based deployments, where often times you don't need the full power of Kubernetes. And small teams and organizations often don't have the resources to maintain a production-grade Kubernetes cluster.</p> <p>Helmless aims to give you the developer experience of Helm, without the overhead of Kubernetes. It does this by only using Helm's templating feature, linting and schema validation and not the full Helm CLI.</p> values.yaml<pre><code>global:\n  common: &amp;common\n    name: helmless-service\n    project: helmless\n    region: europe-west1\nservice:\n  &lt;&lt;: *common\n  env:\n    COLOR: 'blue'\n  secrets:\n    MY_SECRET: 'secret-key-in-gcp'\njob:\n  &lt;&lt;: *common\n  name: helmless-job\n  env:\n    COLOR: 'red'\n</code></pre>"},{"location":"docs/faq/#why-no-kubernetes","title":"Why no Kubernetes?","text":"<p>Helm, and for this project its templating feature, offers a great developer experience for managing containerized applications. However by default Helm is built for Kubernetes, which brings a lot of overhead and complexity for container-based deployments, where often times you don't need the full power of Kubernetes. And small teams and organizations often don't have the resources to maintain a production-grade Kubernetes cluster.</p> <p>Helmless aims to give you the developer experience of Helm, without the overhead of Kubernetes.</p>"},{"location":"docs/faq/#why-no-terraform","title":"Why no Terraform?","text":"<p>Terraform is a great tool for managing infrastructure as code, but especially for frequent deployments it quickly becomes a bottleneck. Infrastructure changes should be carefully managed and gated, and not be a part of the fast feedback loop that developers expect for deploying their own code as an application container.</p> <p>This is where Helmless comes in. It decouples the container deployment from the infrastructure deployment, and allows you to use the great developer experience of Helm for application deployments, while leaving the infrastructure management to other tools, like Terraform. By defining the container specification directly inside your application repository and by using the standard CI/CD pipeline, you can frequently deploy your application without waiting for the long approval process of infrastructure changes done in Terraform.</p>"},{"location":"docs/why-helmless/","title":"Why Helmless?","text":"<p>Fast and easy deployments are critical for velocity. However, some organizations find Kubernetes too complex and Terraform too slow.</p> <p>Helmless bridges this gap and provides fast and flexible deployments without requiring Kubernetes.</p>"},{"location":"docs/why-helmless/#faster-deployment-times","title":"\ud83d\ude80 Faster Deployment Times","text":"<p>By switching to Helmless, you can reduce the time it takes to deploy your containers to Google Cloud Run from hours to minutes. Terraform is not built for fast iterations and continuous delivery. That however is exactly what you need for the deployment of your containers.</p> <p>Helmless bypasses Terraform and directly integrates with your app repository. It uses Helm to render the Google Cloud Run manifest and then directly deploys it using the <code>gcloud</code> CLI.</p> *Manually setting the image tag from the app repository in a Terraform monorepository; waiting for plan preview and pull request review; repeating this process up to three times, once per stage."},{"location":"docs/why-helmless/#higher-deployment-frequency","title":"\u2b50 Higher Deployment Frequency","text":"<p>Helmless allows you to deploy your containers to Google Cloud Run at any time, without waiting for the long approval and preview process of infrastructure changes done in Terraform. It can be directly integrated into your CI/CD pipeline and unlocks the full potential of continuous delivery.</p> By using Helmless, 1KOMMA5\u00b0 significantly improved deployment times and frequency to Google Cloud Run."},{"location":"docs/why-helmless/#getting-started","title":"Getting Started","text":"<ul> <li> <p> What is Helmless?</p> <p>Learn what Helmless is, how it works and why it's different from other tools.</p> <p> Learn more</p> </li> <li> <p> Helmless Architecture</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Understand the Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience and deploy your first service to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations, including a complete CI/CD pipeline.</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/why-helmless/#why-not-kubernetes","title":"Why not Kubernetes?","text":"<p>Wether you need Kubernetes or not is your decision to make. However, if you decided that for the current state of your organization or platform Kubernetes is not the right choice, Helmless will help you to bring a similar developer experience to Google Cloud Run. All without the overhead of Kubernetes or slowness of Terraform.</p>"},{"location":"docs/why-helmless/#why-not-terraform","title":"Why not Terraform?","text":"<p>Terraform is a great tool for managing infrastructure. However, it's not built for fast iterations and continuous delivery. That however is exactly what you need for the deployment of your containers.</p> <p>Helmless bypasses Terraform and directly integrates with your app repository. It uses Helm to render the Google Cloud Run manifest and then directly deploys it using the <code>gcloud</code> CLI.</p>"},{"location":"docs/why-helmless/#why-helm","title":"Why Helm?","text":"<p>Helm is a great tool for deploying applications to Kubernetes. However, it's not built for Google Cloud Run.</p> <p>Helmless uses Helm to render the Google Cloud Run manifest and then directly deploys it using the <code>gcloud</code> CLI. This way you can still benefit from the developer experience of Helm, while not having to deal with the complexity of Kubernetes.</p>"},{"location":"docs/cloudrun/","title":"Google Cloud Run","text":"<p>Google Cloud Run is the first platform for which Helmless was adopted.</p> <ul> <li> <p> 5min Quick Start</p> <p>Learn how to deploy your first Google Cloud Run Service in 5 minutes</p> <p> Get Started</p> </li> <li> <p> CI/CD with Github Actions</p> <p>Learn how to deploy your container to Google Cloud Run using Github Actions</p> <p> Learn More</p> </li> <li> <p> Examples</p> <p>See real-world implementations of Helmless for Google Cloud Run</p> <p> View Examples</p> </li> <li> <p> Advanced Concepts</p> <p>Learn advanced concepts for Google Cloud Run with Helmless, like how to use Terraform to create a shell around your service</p> <p> Dive Deeper</p> </li> </ul>"},{"location":"docs/cloudrun/advanced/","title":"Advanced Deployment Guide","text":"<p>Work in Progress</p> <p>This guide is a work in progress.</p>"},{"location":"docs/cloudrun/ci-cd/","title":"CI/CD with Github Actions","text":"<p>Helmless is designed to be used in any CI/CD pipeline to deploy your container to the cloud provider of your choice. Since we use Github Actions as our CI/CD platform of choice, this guide will show you how to deploy your container to Google Cloud Run using Github Actions.</p> <p>Helmless provides a Github Action that you can use in your workflow to deploy your container to Google Cloud Run.</p> <p>Contributing other CI/CD Platforms</p> <p>If you want to extend Helmless to other CI/CD platforms, we kindly ask you to get in touch and contribute to the project.</p>"},{"location":"docs/cloudrun/ci-cd/#prerequisites","title":"Prerequisites","text":"<p>Before you can start using Github Actions to deploy your container to Google Cloud Run, you need to allow your Github repository access to your GCP project.</p>"},{"location":"docs/cloudrun/ci-cd/#workload-identity-federation","title":"Workload Identity Federation","text":"<p>To allow your Github repository to access your GCP project, you need to setup Github Workload Identity Federation. To make this as easy as possible, we created a small Terraform module that can be used to setup the necessary resources in your GCP project.</p> <p>Deploy it however you deploy your  infrastructure and make sure to update the <code>github_organization</code> variable to match your Github organization.</p> workload-identity.tf<pre><code>module \"github_federation\" {\n  source              = \"github.com/helmless/google-workload-identity-federation-terraform-module?ref=v0.1.0\"\n  github_organization = \"helmless\"\n}\n</code></pre> <p>Applying this module you will get:</p> <ul> <li>a workload identity pool (1)</li> <li>a workload identity provider for your Github repository (2)<ul> <li>that only allows repositories in your Github organization to authenticate with the workload identity pool</li> </ul> </li> </ul> <ol> <li>A workload identity pool is a container for your workload identities. It uses the <code>google_iam_workload_identity_pool</code> Terraform resource.</li> <li>A workload identity provider is a reference to the Github OIDC identity provider. It uses the <code>google_iam_workload_identity_pool_provider</code> Terraform resource and is scoped to only allow tokens issued by Github and from repositories in your specified organization.</li> </ol>"},{"location":"docs/cloudrun/ci-cd/#github-repository-permissions","title":"Github Repository Permissions","text":"<p>After setting up the workload identity federation, you need to grant the Github repository the necessary permissions to access your GCP project. You do this by giving the <code>principalSet</code> scoped to the repository the <code>roles/iam.workloadIdentityUser</code> role on the GCP projects default service account that is used by Cloud Run. And it will need <code>roles/run.admin</code> permissions on the Cloud Run project where you want to deploy your container.</p> <p>Important</p> <p>These permissions are quick start permissions to get you up and running quickly. In production you should scope those permissions to the individual resources you want to deploy and give each Cloud Run service its own service account. (1)</p> <ol> <li>See the advanced deployment guide for more information.</li> </ol> iam.tf<pre><code>locals {\n    repositories = [\"your-repository\"]\n    # This prefixes all repositories with the correct `principalSet` and attribute mapping.\n    repository_principals = { for repository in local.repositories : repository =&gt; \"${module.github_federation.repository_principal_set_id_prefix}/${repository}\" }\n}\n\ndata \"google_project\" \"project\" {}\n\n# This grants the `principalSet` the `roles/run.admin` role on the GCP project.\nresource \"google_project_iam_member\" \"project\" { (2)\n  for_each = local.repository_principals\n  project  = data.google_project.project.project_id\n  role     = \"roles/run.admin\"\n  member   = each.value\n}\n\n# This grants the `principalSet` the `roles/iam.serviceAccountUser` role on the GCP projects default service account.\nresource \"google_service_account_iam_member\" \"cloud_run_v2\" { (3)\n  for_each = local.repository_principals\n\n  service_account_id = \"projects/${data.google_project.project.project_id}/serviceAccounts/${data.google_project.project.number}-compute@developer.gserviceaccount.com\"\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = each.value\n}\n</code></pre> <p>Now run the following command to get the <code>GCP_WORKLOAD_IDENTITY_POOL</code>:</p> <pre><code>gcloud iam workload-identity-pools providers list --location=global --workload-identity-pool=github\n</code></pre> <p>This should return something like this which you will need to set as a Github secret in your repository.</p> <pre><code>projects/YOUR_PROJECT_ID/locations/global/workloadIdentityPools/github/providers/github-oidc\n</code></pre> <p>Success</p> <p>You have now setup the necessary resources to allow your Github repository to access your GCP project and to deploy your container to Google Cloud Run.</p>"},{"location":"docs/cloudrun/ci-cd/#github-deployment-action","title":"Github Deployment Action","text":"<p>You can find a full example of a Github Actions workflow in the GitHub repository.</p> <p>Here is a simplified version of the workflow with matrix deployment for multiple services:</p> deploy.yml<pre><code>name: \ud83d\ude80 Deploy Cloud Run Service\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: \ud83d\ude80 helmless-service\n    runs-on: ubuntu-24.04\n    permissions:\n      contents: read\n      id-token: write\n    concurrency:\n      group: helmless-service\n\n    steps:\n      - name: \ud83d\udce5 Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udd11 Google Auth\n        id: auth\n        uses: google-github-actions/auth@v2\n        with:\n          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }} (1)\n\n      - name: \ud83d\ude80 Deploy Service\n        uses: helmless/google-cloudrun-action@v0.2.1 (6)\n        id: deploy\n        with:\n          files: |\n            helmless/values.yaml (2)\n          chart: oci://ghcr.io/helmless/google-cloudrun-service (3)\n          chart_version: \"latest\" (4)\n          dry_run: false (5)\n</code></pre> <ol> <li>The <code>GCP_WORKLOAD_IDENTITY_POOL</code> is the workload identity pool you created in the Github Workload Identity Federation section.</li> <li>The <code>files</code> argument takes one or more <code>values.yaml</code> files. In this example we use a single <code>helmless/values.yaml</code> file that was created in the Getting Started guide. The files are applied in the order they are listed. So if you need to override values in a specific file, you can do so by listing the file with the higher precedence last.</li> <li>The Helmless chart to use for the templating. Defaults to <code>oci://ghcr.io/helmless/google-cloudrun-service</code>. See packages for a list of available charts.</li> <li>The version of the Helm chart to deploy. <code>latest</code> and all valid Helm chart version ranges are supported.</li> <li>If true the template will only be validated against the GCP Cloud Run API but not deployed.</li> <li>The version of the Helmless Github Action to use. Make sure to use the latest version.</li> </ol>"},{"location":"docs/cloudrun/examples/","title":"Cloud Run Examples","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>For now, you can find examples in the GitHub repository under the e2e tests and the related CI/CD pipeline.</p>"},{"location":"docs/cloudrun/quickstart/","title":"Quickstart: Deploy to Google Cloud Run","text":"<p>This tutorial will get you up and running with Helmless by deploying a simple \"Hello World\" container to Google Cloud Run.</p> <p>Time to complete</p> <p>This tutorial will take approximately 5 minutes to complete.</p>"},{"location":"docs/cloudrun/quickstart/#prerequisites","title":"Prerequisites","text":"<p>You'll need:</p> <ul> <li>Google Cloud CLI installed</li> <li>Helm CLI installed</li> <li>A Google Cloud account with billing enabled</li> </ul>"},{"location":"docs/cloudrun/quickstart/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<ol> <li> <p>Login to Google Cloud:    <pre><code>gcloud auth login\n</code></pre></p> </li> <li> <p>Set your project and region:    <pre><code>gcloud config set project YOUR_PROJECT_ID\ngcloud config set run/region europe-west1  # or your preferred region\n</code></pre></p> </li> </ol>"},{"location":"docs/cloudrun/quickstart/#step-2-create-your-service-configuration","title":"Step 2: Create Your Service Configuration","text":"<ol> <li> <p>Create a new directory for your service:    <pre><code>mkdir -p my-first-service/helmless &amp;&amp; cd my-first-service\n</code></pre></p> </li> <li> <p>Create a <code>helmless/values.yaml</code> file:    <pre><code>cat &lt;&lt;EOF &gt; helmless/values.yaml\n# yaml-language-server: \\$schema=https://raw.githubusercontent.com/helmless/helmless/main/charts/cloudrun/service/values.schema.json\nname: hello-helmless\nregion: $(gcloud config get run/region)\nproject: $(gcloud config get project)\nimage: 'us-docker.pkg.dev/cloudrun/container/hello'\nenv:\n   COLOR: 'blue'\nEOF\n</code></pre></p> </li> </ol> <p>This is your service configuration. It defines everything about your service that would normally be defined via the GCP Console or Terraform.</p> <p>Helmless Chart Schema</p> <p>You can find the full schema for the Google Cloud Run Service Helmless chart here. </p>"},{"location":"docs/cloudrun/quickstart/#step-3-generate-the-cloud-run-configuration","title":"Step 3: Generate the Cloud Run Configuration","text":"<p>Run this command to template your service:</p> <pre><code>helm template oci://ghcr.io/helmless/google-cloudrun-service \\\n  -f helmless/values.yaml \\\n  &gt; helmless/service.yaml\n</code></pre> <p>This will generate a <code>service.yaml</code> manifest in the GCP native format and will be used to deploy your service using the CLI.</p>"},{"location":"docs/cloudrun/quickstart/#step-4-deploy-your-service","title":"Step 4: Deploy Your Service","text":"<p>Deploy to Cloud Run:</p> <pre><code>gcloud run services replace helmless/service.yaml\n</code></pre> <p>That's it! Your service is now deployed to Google Cloud Run.</p>"},{"location":"docs/cloudrun/quickstart/#step-5-test-your-service","title":"Step 5: Test Your Service","text":"<ol> <li>Start the Cloud Run proxy:    <pre><code>gcloud run services proxy hello-helmless\n</code></pre></li> </ol> <ol> <li>Open http://localhost:8080 in your browser</li> </ol> <p>You should see a blue-themed \"Hello World\" page! \ud83c\udf89</p>"},{"location":"docs/cloudrun/quickstart/#try-something-new","title":"Try Something New","text":"<p>Change the color of your service:</p> <ol> <li> <p>Update <code>COLOR</code> in <code>helmless/values.yaml</code>:    <pre><code>env:\n  COLOR: 'green'  # change from 'blue' to 'green'\n</code></pre></p> </li> <li> <p>Re-run the template and deploy commands:    <pre><code>helm template oci://ghcr.io/helmless/google-cloudrun-service \\\n  -f helmless/values.yaml \\\n  &gt; helmless/service.yaml\n\ngcloud run services replace helmless/service.yaml\n</code></pre></p> </li> <li> <p>Refresh your browser to see the new color!</p> </li> </ol>"},{"location":"docs/cloudrun/quickstart/#clean-up","title":"Clean Up","text":"<p>When you're done, delete the service:</p> <pre><code>gcloud run services delete hello-helmless\n</code></pre>"},{"location":"docs/cloudrun/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li> <p> CI/CD with Github Actions</p> <p>Learn how to deploy your container to Google Cloud Run using Github Actions.</p> <p> Learn More</p> </li> <li> <p> Configuration Options</p> <p>Explore the full configuration options for Google Cloud Run Services and Jobs.</p> <p> View Schema</p> </li> <li> <p> Examples</p> <p>See real-world implementations of Helmless for Google Cloud Run.</p> <p> View Examples</p> </li> <li> <p> About Helmless</p> <p>Learn more about what Helmless is and how it works.</p> <p> Learn More</p> </li> </ul>"},{"location":"docs/cloudrun/schemas/","title":"Google Cloud Run Schemas","text":"<ul> <li> <p> Google Cloud Run Service</p> <p>The schema for the Google Cloud Run Service chart.</p> <p> View Schema </p> </li> <li> <p> Google Cloud Run Job</p> <p>The schema for the Google Cloud Run Job chart.</p> <p> View Schema </p> </li> </ul>"},{"location":"docs/cloudrun/schemas/service/","title":"Cloud Run Service Chart","text":"<p>A Helm chart to template the manifest of a Cloud Run Service.</p> Minimal ServiceService with Direct VPC Connect <pre><code>root: \n  name: my-service\n  image: ghcr.io/my-org/my-image@sha256:abc123\n  region: us-central1\n  env: \n    MY_ENV_VAR: my-value\n  autoscaling: \n    minScale: 0 # scale to zero\n</code></pre> <pre><code>root: \n  name: my-service\n  image: ghcr.io/my-org/my-image@sha256:abc123\n  region: us-central1\n  vpc: \n    network: my-network\n    subnetwork: my-subnetwork\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.name","title":"<code>name</code>","text":"<p>0.1.1 <code>string</code> 63 <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p> <p>Name of the Cloud Run Service or Job. Must be unique within the project region combination.</p> <pre><code>root:\n  name: my-cloudrun-container\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>root:\n  project: my-project\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>root:\n  region: us-central1\n</code></pre> <pre><code>root:\n  region: europe-west1\n</code></pre> <pre><code>root:\n  region: asia-east1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.image","title":"<code>image</code>","text":"<p>0.1.1 <code>object</code>, <code>string</code> <code>us-docker.pkg.dev/cloudrun/container/hello</code></p> <p>Container image to deploy. You can provide a direct reference to an image using a <code>string</code> or split up the inputs using the <code>object</code>.</p> Direct image referenceSplit image referenceSplit image reference with tag and registry <pre><code>root:\n  image: ghcr.io/my-org/my-image@sha256:abc123\n</code></pre> <pre><code>root:\n  image: \n    repository: ghcr.io/my-project\n    name: my-image\n</code></pre> <pre><code>root:\n  image: \n    registry: ghcr.io\n    repository: my-project\n    name: my-image\n    tag: 1.0.0\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.image.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image name.</p> <pre><code>root:\n  image:\n    name: my-image\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.image.registry","title":"<code>registry</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image registry.</p> <pre><code>root:\n  image:\n    registry: gcr.io\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.image.repository","title":"<code>repository</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image repository.</p> Example 1Example 2 <pre><code>root:\n  image:\n    repository: gcr.io/my-project\n</code></pre> <pre><code>root:\n  image:\n    repository: my-project # if used with a registry\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.image.tag","title":"<code>tag</code>","text":"<p>0.1.0 <code>string</code> <code>latest</code></p> <p>Container image tag.</p> Example 1Example 2Example 3 <pre><code>root:\n  image:\n    tag: latest\n</code></pre> <pre><code>root:\n  image:\n    tag: @sha256:abc123\n</code></pre> <pre><code>root:\n  image:\n    tag: 1.0.0\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.revisionName","title":"<code>revisionName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The name of the Cloud Run revision to deploy. If not provided, a random name will be generated. The revision will always be prefixed with the service name.</p> <pre><code>root:\n  revisionName: my-revision\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.containerName","title":"<code>containerName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>Optional name for the container within a revision. Automatically generated if not supplied.</p> <pre><code>root:\n  containerName: my-container\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.serviceAccountName","title":"<code>serviceAccountName</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Service account to use to run the CloudRun container. If not provided, the default service account of the project is used.</p> <pre><code>root:\n  serviceAccountName: my-service-account@my-project.iam.gserviceaccount.com\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.description","title":"<code>description</code>","text":"<p>0.1.1 <code>string</code> </p> <p>A human-readable description of the CloudRun service.</p> <pre><code>root:\n  description: My service does xyz.\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.env","title":"<code>env</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Environment variables to set in the CloudRun container. Using an object allows merging of multiple values, e.g. <code>env.staging</code> and <code>env.production</code>.</p> <pre><code>root:\n  env: \n    MY_ENV_VAR: my-value\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.secrets","title":"<code>secrets</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Secrets to map as environment variables in the Cloud Run container.</p> Latest SecretSpecific Secret VersionCross Project Secret with Project NumberCross Project Secret with Project IDMixed Local and Cross Project Secrets <pre><code>root:\n  secrets: \n    MY_ENV_VAR: my-secret-name\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: my-secret-name\n      version: 2\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: another-secret-name\n      project: 123456789\n      version: 1\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: another-secret-name\n      project: my-project-id\n      version: 1\n</code></pre> <pre><code>root:\n  secrets: \n    LOCAL_ENV_VAR: my-secret-name\n    CROSS_ENV_VAR: \n      secret: another-secret-name\n      project: my-project-id\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.command","title":"<code>command</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Command that runs when the container starts.</p> <pre><code>root:\n  command:\n    - echo\n    - Hello, world!\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.args","title":"<code>args</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Arguments to pass to the command.</p> <pre><code>root:\n  args:\n    - --help\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources","title":"<code>resources</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Resource requests and limits for the CloudRun container. If not provided, defaults are used.</p> DefaultReduced Scaling LatencyHigh Memory <pre><code>root:\n  resources: \n    cpuThrottling: true\n    startupBoost: false\n    limits: \n      cpu: 1\n      memory: 512Mi\n</code></pre> <pre><code>root:\n  resources: \n    cpuThrottling: false\n    startupBoost: true\n</code></pre> <pre><code>root:\n  resources: \n    limits: \n      cpu: 4\n      memory: 8Gi\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.cpuThrottling","title":"<code>cpuThrottling</code>","text":"<p>0.1.0 <code>boolean</code> <code>True</code></p> <p>Whether to throttle the CPU. This has significant impact on billing if set to <code>false</code>.</p> <pre><code>root:\n  resources:\n    cpuThrottling: false\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.gpu","title":"<code>gpu</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable GPU support for the Cloud Run container. Only a single GPU per cloud run container is supported and will incur additional costs.</p> <pre><code>root:\n  resources:\n    gpu: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.limits","title":"<code>limits</code>","text":"<p>0.1.0 <code>object</code> </p>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.limits.cpu","title":"<code>cpu</code>","text":"<p>0.1.0 <code>number</code> <code>1</code></p> <p>Maximum CPUs to allocate for the Cloud Run container. Can be 1, 2, 4, 6, 8, or any fractional value from 0.08 to less than 1 in increments of 0.01.</p> <p>The following are minimum memory requirements for CPUs:</p> CPUs Minimum memory 4 2 GiB 6 4 GiB 8 4 GiB <p>If you use less than 1 CPU, the following requirments are enforced:</p> Setting Requirement Memory A minimum of 0.5 CPU is needed to set a memory limit greater than 512MiB.A minimum of 1 CPU is needed to set a memory limit greater than 1GiB. Concurrency Maximum concurrency must be set to 1. CPU allocated CPU allocation must be set to CPU allocated only during request processing. Execution environment You must use the first generation execution environment. MinimumMaximum <pre><code>root:\n  resources:\n    limits:\n      cpu: 0.08\n</code></pre> <pre><code>root:\n  resources:\n    limits:\n      cpu: 8\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.limits.memory","title":"<code>memory</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> <code>512Mi</code></p> <p>Maximum memory to allocate for the Cloud Run container. Must be at least 2GiB for 4 CPUs and 4GiB for 6-8 CPUs.</p> Example 1Example 2 <pre><code>root:\n  resources:\n    limits:\n      memory: 2Gi\n</code></pre> <pre><code>root:\n  resources:\n    limits:\n      memory: 1024Mi\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.resources.startupBoost","title":"<code>startupBoost</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to boost the CPUs at the start of the container.</p> <pre><code>root:\n  resources:\n    startupBoost: false\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes","title":"<code>volumes</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Volume configurations for the Cloud Run container. Each key is the volume name and must be a valid k8s name (lowercase alphanumeric with dashes).</p> SecretEmptyDirGCSNFS <pre><code>root:\n  volumes: \n    config: \n      mountPath: /etc/config\n      secret: \n        name: my-secret\n        items:\n          -\n            version: 1\n            path: config.json\n</code></pre> <pre><code>root:\n  volumes: \n    cache: \n      mountPath: /cache\n      readOnly: false\n      emptyDir: \n        sizeLimit: 256Mi\n        medium: Memory\n</code></pre> <pre><code>root:\n  volumes: \n    data: \n      mountPath: /data\n      gcs: \n        bucket: my-data-bucket\n        mountOptions: \n          file-mode: 0644\n          dir-mode: 0755\n</code></pre> <pre><code>root:\n  volumes: \n    shared: \n      mountPath: /shared\n      nfs: \n        server: 10.0.0.1\n        path: /exports/data\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume","title":"<code>volume</code>","text":"<p>0.1.0 <code>object</code> <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.mountPath","title":"<code>mountPath</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path where the volume should be mounted in the container</p> <pre><code>root:\n  volumes:\n    volume:\n      mountPath: /data\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.readOnly","title":"<code>readOnly</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether the volume should be mounted read-only</p> <pre><code>root:\n  volumes:\n    volume:\n      readOnly: true\n</code></pre> The <code>root.volumes.volume</code> setting requires exactly one of the following configurations: secretemptyDirgcsnfs"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.secret","title":"<code>secret</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount a Secret Manager secret as a volume</p> Latest Secret Version MountMultiple Secret Versions MountCross-Project Secret Mount <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        items:\n          -\n            path: config.json\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        items:\n          -\n            version: 1\n            path: old_key.pem\n          -\n            version: 2\n            path: new_key.pem\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        project: my-project\n        items:\n          -\n            version: 1\n            path: config.json\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.secret.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the secret in Secret Manager</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.secret.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Project ID for cross-project secrets. If not provided, the project of the Cloud Run service is used.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.secret.items","title":"<code>items</code>","text":"<p>0.1.0 <code>array</code> </p> <p>List of specific secret versions to mount</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.emptyDir","title":"<code>emptyDir</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Create an ephemeral in memory volume that exists for the lifetime of the container</p> <pre><code>root:\n  volumes:\n    volume:\n      emptyDir: \n        size: 256Mi\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.emptyDir.size","title":"<code>size</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> </p> <p>Maximum size of the volume. Must not exceed the memory limit of the container.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.gcs","title":"<code>gcs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mounts a Google Cloud Storage bucket.</p> GCS BucketBucket with Mount Options <pre><code>root:\n  volumes:\n    volume:\n      gcs: \n        bucket: my-bucket\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      gcs: \n        bucket: my-bucket\n        mountOptions: \n          file-mode: 0644\n          dir-mode: 0755\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.gcs.bucket","title":"<code>bucket</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the GCS bucket to mount</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.gcs.mountOptions","title":"<code>mountOptions</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Additional mount options for gcsfuse</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.nfs","title":"<code>nfs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount an NFS share. The Cloud Run container must be connected via a VPC connector or direct VPC connection to the subnet where the NFS server is located.</p> <pre><code>root:\n  volumes:\n    volume:\n      nfs: \n        server: 10.0.0.1\n        path: /exports/data\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.nfs.server","title":"<code>server</code>","text":"<p>0.1.0 <code>string</code> <code>^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$</code> </p> <p>IP address or hostname of the NFS server</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.volumes.volume.nfs.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path that is exported by the NFS server</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.network","title":"<code>network</code>","text":"<p>0.1.0 <code>object</code> </p> <p>VPC and networking configuration for the Cloud Run service</p> Direct VPC ConnectionVPC ConnectorCross-Project VPC Access <pre><code>root:\n  network: \n    vpc: my-vpc\n    subnetwork: my-subnet\n    egress: all-traffic\n</code></pre> <pre><code>root:\n  network: \n    egress: private-ranges-only\n    connector: my-connector\n</code></pre> <pre><code>root:\n  network: \n    vpc: projects/other-project/global/networks/my-vpc\n    subnetwork: projects/other-project/regions/us-central1/subnetworks/my-subnet\n    egress: all-traffic\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.network.egress","title":"<code>egress</code>","text":"<p>0.1.0 <code>string</code> <code>private-ranges-only</code> \u00b7 <code>all-traffic</code> <code>private-ranges-only</code></p> <p>The egress type to use for the Cloud Run container if connected to a VPC. In general, use <code>private-ranges-only</code> to reduce latency and bottlenecks when calling external services. Can only be set when <code>connector</code> or <code>vpc</code> and <code>subnetwork</code> are set.</p> <pre><code>root:\n  network:\n    egress: all-traffic\n</code></pre> The <code>root.network</code> setting requires exactly one of the following configurations: connectorvpc"},{"location":"docs/cloudrun/schemas/service/#values.root.network.connector","title":"<code>connector</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/locations/[^/]+/connectors/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC connector to use for the CloudRun container. Uses a serverless VPC access connector. Cannot be used with network.</p> Example 1Example 2 <pre><code>root:\n  network:\n    connector: projects/my-project/locations/us-central1/connectors/my-connector\n</code></pre> <pre><code>root:\n  network:\n    connector: my-connector\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.network.vpc","title":"<code>vpc</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/global/networks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC network to use to create a direct VPC connection. Must be used with subnetwork. Cannot be used with connector.</p> Example 1Example 2 <pre><code>root:\n  network:\n    vpc: projects/my-project/global/networks/my-vpc\n</code></pre> <pre><code>root:\n  network:\n    vpc: my-vpc\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.network.subnetwork","title":"<code>subnetwork</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/regions/[^/]+/subnetworks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC subnetwork to use to create a direct VPC connection. Must be used with vpc. Cannot be used with connector.</p> Example 1Example 2 <pre><code>root:\n  network:\n    subnetwork: projects/my-project/regions/us-central1/subnetworks/my-subnet\n</code></pre> <pre><code>root:\n  network:\n    subnetwork: my-subnet\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.network.tags","title":"<code>tags</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Tags to apply to the network interfaces created for the Cloud Run container. Use the network tags feature of VPC access connectors to control traffic to and from the service.</p> <pre><code>root:\n  network:\n    tags:\n      - tag1\n      - tag2\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.cloudsql","title":"<code>cloudsql</code>","text":"<p>0.1.0 <code>object</code> </p> <p>CloudSQL configuration for the Cloud Run service. If not provided, the service will not be connected to any CloudSQL instances.</p> <p>Info</p> <p>Defining this will automatically inject a <code>CLOUD_SQL_CONNECTION</code> environment variable with the format <code>/cloudsql/project:region:instance</code>. Some libraries will automatically append the required <code>/.s.PGSQL.5432</code> suffix to connect to the correct unix socket, while others do not. The environment variable is provided without the socket suffix.</p> Direct CloudSQL Connection in same regionDirect CloudSQL Connection in different region <pre><code>root:\n  cloudsql: \n    instance: my-instance\n    project: my-project\n</code></pre> <pre><code>root:\n  cloudsql: \n    instance: my-instance\n    project: my-project\n    region: europe-west1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.cloudsql.instance","title":"<code>instance</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL instance name.</p> <pre><code>root:\n  cloudsql:\n    instance: my-instance\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.cloudsql.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL project name.</p> <pre><code>root:\n  cloudsql:\n    project: my-project\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.cloudsql.region","title":"<code>region</code>","text":"<p>0.1.0 <code>string</code> <code>.region</code></p> <p>CloudSQL region. Defaults to the region of the Cloud Run service.</p> <pre><code>root:\n  cloudsql:\n    region: us-central1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.executionEnvironment","title":"<code>executionEnvironment</code>","text":"<p>0.1.0 <code>string</code> <code>gen2</code> \u00b7 <code>gen1</code> <code>gen2</code></p> <p>The execution environment to use for the Cloud Run container.</p> <pre><code>root:\n  executionEnvironment: gen1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.launchStage","title":"<code>launchStage</code>","text":"<p>0.1.0 <code>string</code> <code>ALPHA</code> \u00b7 <code>BETA</code> \u00b7 <code>GA</code> <code>BETA</code></p> <p>The launch stage of the Cloud Run service. Controls feature availability.</p> <pre><code>root:\n  launchStage: GA\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.autoscaling","title":"<code>autoscaling</code>","text":"<p>0.1.1 <code>object</code> </p> DefaultScale to zero <pre><code>root:\n  autoscaling: \n    minScale: 1\n    maxScale: 100\n    maxConcurrentRequests: 80\n    timeoutSeconds: 60\n</code></pre> <pre><code>root:\n  autoscaling: \n    minScale: 0\n    maxScale: 100\n    maxConcurrentRequests: 80\n    timeoutSeconds: 120\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.autoscaling.minScale","title":"<code>minScale</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Minimum number of replicas to scale down to. 0 enables scale to zero.</p> DefaultScale to zero <pre><code>root:\n  autoscaling:\n    minScale: 1\n</code></pre> <pre><code>root:\n  autoscaling:\n    minScale: 0\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.autoscaling.maxScale","title":"<code>maxScale</code>","text":"<p>0.1.0 <code>integer</code> <code>100</code></p> <p>Maximum number of replicas to scale up to.</p> <pre><code>root:\n  autoscaling:\n    maxScale: 1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.autoscaling.maxConcurrentRequests","title":"<code>maxConcurrentRequests</code>","text":"<p>0.1.0 <code>integer</code> <code>80</code></p> <p>The number of concurrent requests per instance. Controls how many requests are processed before the autoscaler scales up. Setting this to 1 means 1 request per instance at a time.</p> <pre><code>root:\n  autoscaling:\n    maxConcurrentRequests: 1\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.autoscaling.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>300</code></p> <p>The maximum time the container will wait before responding with a 504 error. Especially important for startup times of newly spawned containers.</p> <pre><code>root:\n  autoscaling:\n    timeoutSeconds: 120\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.sessionAffinity","title":"<code>sessionAffinity</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable session affinity for the CloudRun service. When enabled, requests from the same client are routed to the same container instance.</p> <pre><code>root:\n  sessionAffinity: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.containerPort","title":"<code>containerPort</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Container port to expose. In CloudRun only a single port can be exposed and defaults to 8080.</p> <pre><code>root:\n  containerPort: 8081\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.http2","title":"<code>http2</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to use HTTP/2 for the container port. If enabled, the port name will be h2c instead of http1.</p> <pre><code>root:\n  http2: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.ingress","title":"<code>ingress</code>","text":"<p>0.1.0 <code>string</code> <code>all</code> \u00b7 <code>internal</code> \u00b7 <code>internal-and-cloud-load-balancing</code> <code>all</code></p> <p>The ingress settings for the CloudRun service. Controls where the service can be accessed from.</p> <pre><code>root:\n  ingress: internal\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe","title":"<code>startupProbe</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The startup probe controls how the Cloud Run service is monitored for readiness. And new revisions will only replace the running container if the startup probe succeeds.</p> HTTPTCPgRPC <pre><code>root:\n  startupProbe: \n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n    failureThreshold: 3\n    httpGet: \n      path: /health\n      port: 8080\n      httpHeaders:\n        -\n          name: X-Custom-Header\n          value: my-value\n</code></pre> <pre><code>root:\n  startupProbe: \n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n    failureThreshold: 3\n    tcpSocket: \n      port: 8080\n</code></pre> <pre><code>root:\n  startupProbe: \n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n    failureThreshold: 3\n    grpc: \n      port: 8080\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.initialDelaySeconds","title":"<code>initialDelaySeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>0</code></p> <p>Number of seconds after the container starts before the probe is initiated</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.periodSeconds","title":"<code>periodSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>10</code></p> <p>How often (in seconds) to perform the probe</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Number of seconds after which the probe times out</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.failureThreshold","title":"<code>failureThreshold</code>","text":"<p>0.1.0 <code>integer</code> <code>3</code></p> <p>Number of consecutive failures required to determine the container is not alive</p> The <code>root.startupProbe</code> setting requires exactly one of the following configurations: httpGettcpSocketgrpc"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.httpGet","title":"<code>httpGet</code>","text":"<p>0.1.0 <code>object</code> </p> <p>HTTP health check configuration. If you are configuring your Cloud Run service for HTTP probes, you must also add an endpoint in your service code to respond to the probe. Any response between 200 and 400 is a success, everything else indicates failure.</p> <pre><code>root:\n  startupProbe:\n    httpGet: \n      path: /health\n      port: 8080\n      httpHeaders:\n        -\n          name: X-Custom-Header\n          value: my-value\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.httpGet.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Relative path to the HTTP endpoint, for example, /heatlh.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.httpGet.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Port to probe for HTTP health check. Should be set to the container port used for your service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.httpGet.httpHeaders","title":"<code>httpHeaders</code>","text":"<p>0.1.0 <code>array</code> </p> <p>HTTP headers can be used to supply multiple or repeated custom headers.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.tcpSocket","title":"<code>tcpSocket</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Probes if the container is listening on the specified port. Use the other health check options for more control.</p> <pre><code>root:\n  startupProbe:\n    tcpSocket: \n      port: 8080\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.tcpSocket.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port should be set to the container port used for your service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.grpc","title":"<code>grpc</code>","text":"<p>0.1.0 <code>object</code> </p> <p>If you are configuring a gRPC probe, you must also implement the gRPC Health Checking protocol in your Cloud Run service.</p> <pre><code>root:\n  startupProbe:\n    grpc: \n      port: 8080\n      service: my-service\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.grpc.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port to probe for gRPC health check. Should be set to the container port used for your service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.startupProbe.grpc.service","title":"<code>service</code>","text":"<p>0.1.0 <code>string</code> </p> <p>If set, this is used in the service field of the <code>grpc.health.v1.HealthCheckRequest</code> when the <code>grpc.health.v1.Health.Check</code> rpc is called.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe","title":"<code>livenessProbe</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The liveness probe controls how the Cloud Run service is monitored for health. If a liveness probe does not succeed within the specified time (failureThreshold * periodSeconds), the container is shut down using a SIGKILL signal. Any remaining requests that were still being served by the container are terminated with the HTTP status code 503. After the container is shut down, Cloud Run autoscaling starts up a new container instance.</p> HTTPgRPC <pre><code>root:\n  livenessProbe: \n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n    failureThreshold: 3\n    httpGet: \n      path: /health\n      port: 8080\n</code></pre> <pre><code>root:\n  livenessProbe: \n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 1\n    failureThreshold: 3\n    grpc: \n      port: 8080\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.initialDelaySeconds","title":"<code>initialDelaySeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>0</code></p> <p>Number of seconds after the container starts before the probe is initiated</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.periodSeconds","title":"<code>periodSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>10</code></p> <p>How often (in seconds) to perform the probe</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Number of seconds after which the probe times out</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.failureThreshold","title":"<code>failureThreshold</code>","text":"<p>0.1.0 <code>integer</code> <code>3</code></p> <p>Number of consecutive failures required to determine the container is not alive</p> The <code>root.livenessProbe</code> setting requires exactly one of the following configurations: httpGetgrpc"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.httpGet","title":"<code>httpGet</code>","text":"<p>0.1.0 <code>object</code> </p> <p>HTTP health check configuration. If you are configuring your Cloud Run service for HTTP probes, you must also add an endpoint in your service code to respond to the probe. Any response between 200 and 400 is a success, everything else indicates failure.</p> <pre><code>root:\n  livenessProbe:\n    httpGet: \n      path: /health\n      port: 8080\n      httpHeaders:\n        -\n          name: X-Custom-Header\n          value: my-value\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.httpGet.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Relative path to the HTTP endpoint, for example, /heatlh.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.httpGet.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Port to probe for HTTP health check. Should be set to the container port used for your service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.httpGet.httpHeaders","title":"<code>httpHeaders</code>","text":"<p>0.1.0 <code>array</code> </p> <p>HTTP headers can be used to supply multiple or repeated custom headers.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.grpc","title":"<code>grpc</code>","text":"<p>0.1.0 <code>object</code> </p> <p>If you are configuring a gRPC probe, you must also implement the gRPC Health Checking protocol in your Cloud Run service.</p> <pre><code>root:\n  livenessProbe:\n    grpc: \n      port: 8080\n      service: my-service\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.grpc.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port to probe for gRPC health check. Should be set to the container port used for your service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.livenessProbe.grpc.service","title":"<code>service</code>","text":"<p>0.1.0 <code>string</code> </p> <p>If set, this is used in the service field of the <code>grpc.health.v1.HealthCheckRequest</code> when the <code>grpc.health.v1.Health.Check</code> rpc is called.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.disableInvokerIamPolicy","title":"<code>disableInvokerIamPolicy</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to disable the invoker IAM policy for the Cloud Run service. This is useful when using a VPC connector or direct VPC connection to avoid conflicts with the invoker IAM policy. Must be first requested via invite and is not generally available.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.customAudiences","title":"<code>customAudiences</code>","text":"<p>0.1.0 <code>array</code> </p> <p>Custom audiences to set in the generated ID token when using Identity Platform.</p> <pre><code>root:\n  customAudiences:\n    - https://example.com\n    - my-audience\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.binaryAuthorization","title":"<code>binaryAuthorization</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enforce Binary Authorization policy for this service.</p> <pre><code>root:\n  binaryAuthorization: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.encryption","title":"<code>encryption</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The KMS key to use for encrypting this service. Must be located in the same region and project as the Cloud Run service.</p> <pre><code>root:\n  encryption: \n    key: my-key\n    keyring: my-keyring\n</code></pre>"},{"location":"docs/cloudrun/schemas/service/#values.root.encryption.key","title":"<code>key</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS key to use for encrypting this service.</p>"},{"location":"docs/cloudrun/schemas/service/#values.root.encryption.keyring","title":"<code>keyring</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS keyring where the key is stored.</p>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/","title":"Changelog","text":""},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#0.2.1","title":"0.2.1(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.2.0...google-cloudrun-service-v0.2.1) (2025-03-21)","text":""},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>trigger release and set new icon (81d71db)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#0.2.0","title":"0.2.0(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.1.1...google-cloudrun-service-v0.2.0) (2025-03-20)","text":""},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#features","title":"Features","text":"<ul> <li>extract common helm chart and schema (d8e1d69)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>derefenrence schema before commit (637b754)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#0.1.1","title":"0.1.1(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.1.0...google-cloudrun-service-v0.1.1) (2025-03-07)","text":""},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>add explicit global settings to the schema (1dec277)</li> <li>cloudrun-service: allow additional properties, e.g. global (ae5b74d)</li> <li>test: exclude volatile version from snapshot test (d46096c)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#0.1.0","title":"0.1.0 (2024-12-04)","text":""},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#features_1","title":"Features","text":"<ul> <li>cloudrun service chart (#6) (38836de)</li> <li>docs: add support for enums in schema (07d12d8)</li> <li>finish docs refactor and add chart schema renderer (1ebea3b)</li> <li>move google cloud run helm chart back into monorepo (74cc7a1)</li> <li>schema: add really nice schema rendering and examples (cad3df6)</li> <li>schema: extend cloud run service schema (99268c2)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>cloudrun-service: do not autoset region, let the cli do it (770fd3c)</li> <li>docs: update the changelog heading regex (64976d8)</li> <li>release: set correct component name (992f319)</li> <li>release: update snapshots in release pr (f2ebcff)</li> <li>render nested props correctly (3794a01)</li> <li>schema: cleanup chart values file and schema (808585e)</li> <li>schema: move properties under correct key (111da47)</li> <li>schema: update renderer to correctly indent nested props (a6d1f58)</li> </ul>"},{"location":"docs/cloudrun/schemas/service/CHANGELOG/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>release 0.1.0 (f455943)</li> </ul>"},{"location":"docs/cloudrun/schemas/job/","title":"Cloud Run Job Chart","text":"<p>A Helm chart to template the manifest of a Cloud Run Job.</p> Minimal JobJob with Direct VPC Connect <pre><code>root: \n  name: my-job\n  image: ghcr.io/my-org/my-image@sha256:abc123\n  region: us-central1\n  env: \n    MY_ENV_VAR: my-value\n</code></pre> <pre><code>root: \n  name: my-job\n  image: ghcr.io/my-org/my-image@sha256:abc123\n  region: us-central1\n  vpc: \n    network: my-network\n    subnetwork: my-subnetwork\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.name","title":"<code>name</code>","text":"<p>0.1.1 <code>string</code> 63 <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p> <p>Name of the Cloud Run Service or Job. Must be unique within the project region combination.</p> <pre><code>root:\n  name: my-cloudrun-container\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>root:\n  project: my-project\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>root:\n  region: us-central1\n</code></pre> <pre><code>root:\n  region: europe-west1\n</code></pre> <pre><code>root:\n  region: asia-east1\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.image","title":"<code>image</code>","text":"<p>0.1.1 <code>object</code>, <code>string</code> <code>us-docker.pkg.dev/cloudrun/container/hello</code></p> <p>Container image to deploy. You can provide a direct reference to an image using a <code>string</code> or split up the inputs using the <code>object</code>.</p> Direct image referenceSplit image referenceSplit image reference with tag and registry <pre><code>root:\n  image: ghcr.io/my-org/my-image@sha256:abc123\n</code></pre> <pre><code>root:\n  image: \n    repository: ghcr.io/my-project\n    name: my-image\n</code></pre> <pre><code>root:\n  image: \n    registry: ghcr.io\n    repository: my-project\n    name: my-image\n    tag: 1.0.0\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.image.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image name.</p> <pre><code>root:\n  image:\n    name: my-image\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.image.registry","title":"<code>registry</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image registry.</p> <pre><code>root:\n  image:\n    registry: gcr.io\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.image.repository","title":"<code>repository</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image repository.</p> Example 1Example 2 <pre><code>root:\n  image:\n    repository: gcr.io/my-project\n</code></pre> <pre><code>root:\n  image:\n    repository: my-project # if used with a registry\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.image.tag","title":"<code>tag</code>","text":"<p>0.1.0 <code>string</code> <code>latest</code></p> <p>Container image tag.</p> Example 1Example 2Example 3 <pre><code>root:\n  image:\n    tag: latest\n</code></pre> <pre><code>root:\n  image:\n    tag: @sha256:abc123\n</code></pre> <pre><code>root:\n  image:\n    tag: 1.0.0\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.revisionName","title":"<code>revisionName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The name of the Cloud Run revision to deploy. If not provided, a random name will be generated. The revision will always be prefixed with the service name.</p> <pre><code>root:\n  revisionName: my-revision\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.containerName","title":"<code>containerName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>Optional name for the container within a revision. Automatically generated if not supplied.</p> <pre><code>root:\n  containerName: my-container\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.serviceAccountName","title":"<code>serviceAccountName</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Service account to use to run the CloudRun container. If not provided, the default service account of the project is used.</p> <pre><code>root:\n  serviceAccountName: my-service-account@my-project.iam.gserviceaccount.com\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.description","title":"<code>description</code>","text":"<p>0.1.1 <code>string</code> </p> <p>A human-readable description of the CloudRun service.</p> <pre><code>root:\n  description: My service does xyz.\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.env","title":"<code>env</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Environment variables to set in the CloudRun container. Using an object allows merging of multiple values, e.g. <code>env.staging</code> and <code>env.production</code>.</p> <pre><code>root:\n  env: \n    MY_ENV_VAR: my-value\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.secrets","title":"<code>secrets</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Secrets to map as environment variables in the Cloud Run container.</p> Latest SecretSpecific Secret VersionCross Project Secret with Project NumberCross Project Secret with Project IDMixed Local and Cross Project Secrets <pre><code>root:\n  secrets: \n    MY_ENV_VAR: my-secret-name\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: my-secret-name\n      version: 2\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: another-secret-name\n      project: 123456789\n      version: 1\n</code></pre> <pre><code>root:\n  secrets: \n    MY_ENV_VAR: \n      secret: another-secret-name\n      project: my-project-id\n      version: 1\n</code></pre> <pre><code>root:\n  secrets: \n    LOCAL_ENV_VAR: my-secret-name\n    CROSS_ENV_VAR: \n      secret: another-secret-name\n      project: my-project-id\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.command","title":"<code>command</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Command that runs when the container starts.</p> <pre><code>root:\n  command:\n    - echo\n    - Hello, world!\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.args","title":"<code>args</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Arguments to pass to the command.</p> <pre><code>root:\n  args:\n    - --help\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.parallelism","title":"<code>parallelism</code>","text":"<p>0.1.1 <code>integer</code> <code>0</code></p> <p>The number of instances of the job to run in parallel. The maximum number of instances is limited by the CPU and project quotas. It also highly depends on the consumed resources, e.g. database connections, etc.</p> <pre><code>root:\n  parallelism: 1\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.taskCount","title":"<code>taskCount</code>","text":"<p>0.1.1 <code>integer</code> <code>1</code></p> <p>Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.</p> <pre><code>root:\n  taskCount: 10\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.1 <code>integer</code> <code>600</code></p> <p>The maximum duration in seconds to allow the job to run. If the job is still running after this time, it will be terminated.</p> <pre><code>root:\n  timeoutSeconds: 3600\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.maxRetries","title":"<code>maxRetries</code>","text":"<p>0.1.1 <code>integer</code> <code>3</code></p> <p>The maximum number of retries for the job. If the job fails, it will be retried up to this number of times.</p> <pre><code>root:\n  maxRetries: 0\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources","title":"<code>resources</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Resource requests and limits for the CloudRun container. If not provided, defaults are used.</p> DefaultReduced Scaling LatencyHigh Memory <pre><code>root:\n  resources: \n    cpuThrottling: true\n    startupBoost: false\n    limits: \n      cpu: 1\n      memory: 512Mi\n</code></pre> <pre><code>root:\n  resources: \n    cpuThrottling: false\n    startupBoost: true\n</code></pre> <pre><code>root:\n  resources: \n    limits: \n      cpu: 4\n      memory: 8Gi\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.cpuThrottling","title":"<code>cpuThrottling</code>","text":"<p>0.1.0 <code>boolean</code> <code>True</code></p> <p>Whether to throttle the CPU. This has significant impact on billing if set to <code>false</code>.</p> <pre><code>root:\n  resources:\n    cpuThrottling: false\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.gpu","title":"<code>gpu</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable GPU support for the Cloud Run container. Only a single GPU per cloud run container is supported and will incur additional costs.</p> <pre><code>root:\n  resources:\n    gpu: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.limits","title":"<code>limits</code>","text":"<p>0.1.0 <code>object</code> </p>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.limits.cpu","title":"<code>cpu</code>","text":"<p>0.1.0 <code>number</code> <code>1</code></p> <p>Maximum CPUs to allocate for the Cloud Run container. Can be 1, 2, 4, 6, 8, or any fractional value from 0.08 to less than 1 in increments of 0.01.</p> <p>The following are minimum memory requirements for CPUs:</p> CPUs Minimum memory 4 2 GiB 6 4 GiB 8 4 GiB <p>If you use less than 1 CPU, the following requirments are enforced:</p> Setting Requirement Memory A minimum of 0.5 CPU is needed to set a memory limit greater than 512MiB.A minimum of 1 CPU is needed to set a memory limit greater than 1GiB. Concurrency Maximum concurrency must be set to 1. CPU allocated CPU allocation must be set to CPU allocated only during request processing. Execution environment You must use the first generation execution environment. MinimumMaximum <pre><code>root:\n  resources:\n    limits:\n      cpu: 0.08\n</code></pre> <pre><code>root:\n  resources:\n    limits:\n      cpu: 8\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.limits.memory","title":"<code>memory</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> <code>512Mi</code></p> <p>Maximum memory to allocate for the Cloud Run container. Must be at least 2GiB for 4 CPUs and 4GiB for 6-8 CPUs.</p> Example 1Example 2 <pre><code>root:\n  resources:\n    limits:\n      memory: 2Gi\n</code></pre> <pre><code>root:\n  resources:\n    limits:\n      memory: 1024Mi\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.resources.startupBoost","title":"<code>startupBoost</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to boost the CPUs at the start of the container.</p> <pre><code>root:\n  resources:\n    startupBoost: false\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes","title":"<code>volumes</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Volume configurations for the Cloud Run container. Each key is the volume name and must be a valid k8s name (lowercase alphanumeric with dashes).</p> SecretEmptyDirGCSNFS <pre><code>root:\n  volumes: \n    config: \n      mountPath: /etc/config\n      secret: \n        name: my-secret\n        items:\n          -\n            version: 1\n            path: config.json\n</code></pre> <pre><code>root:\n  volumes: \n    cache: \n      mountPath: /cache\n      readOnly: false\n      emptyDir: \n        sizeLimit: 256Mi\n        medium: Memory\n</code></pre> <pre><code>root:\n  volumes: \n    data: \n      mountPath: /data\n      gcs: \n        bucket: my-data-bucket\n        mountOptions: \n          file-mode: 0644\n          dir-mode: 0755\n</code></pre> <pre><code>root:\n  volumes: \n    shared: \n      mountPath: /shared\n      nfs: \n        server: 10.0.0.1\n        path: /exports/data\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume","title":"<code>volume</code>","text":"<p>0.1.0 <code>object</code> <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.mountPath","title":"<code>mountPath</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path where the volume should be mounted in the container</p> <pre><code>root:\n  volumes:\n    volume:\n      mountPath: /data\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.readOnly","title":"<code>readOnly</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether the volume should be mounted read-only</p> <pre><code>root:\n  volumes:\n    volume:\n      readOnly: true\n</code></pre> The <code>root.volumes.volume</code> setting requires exactly one of the following configurations: secretemptyDirgcsnfs"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.secret","title":"<code>secret</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount a Secret Manager secret as a volume</p> Latest Secret Version MountMultiple Secret Versions MountCross-Project Secret Mount <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        items:\n          -\n            path: config.json\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        items:\n          -\n            version: 1\n            path: old_key.pem\n          -\n            version: 2\n            path: new_key.pem\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      secret: \n        name: my-secret\n        project: my-project\n        items:\n          -\n            version: 1\n            path: config.json\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.secret.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the secret in Secret Manager</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.secret.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Project ID for cross-project secrets. If not provided, the project of the Cloud Run service is used.</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.secret.items","title":"<code>items</code>","text":"<p>0.1.0 <code>array</code> </p> <p>List of specific secret versions to mount</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.emptyDir","title":"<code>emptyDir</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Create an ephemeral in memory volume that exists for the lifetime of the container</p> <pre><code>root:\n  volumes:\n    volume:\n      emptyDir: \n        size: 256Mi\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.emptyDir.size","title":"<code>size</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> </p> <p>Maximum size of the volume. Must not exceed the memory limit of the container.</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.gcs","title":"<code>gcs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mounts a Google Cloud Storage bucket.</p> GCS BucketBucket with Mount Options <pre><code>root:\n  volumes:\n    volume:\n      gcs: \n        bucket: my-bucket\n</code></pre> <pre><code>root:\n  volumes:\n    volume:\n      gcs: \n        bucket: my-bucket\n        mountOptions: \n          file-mode: 0644\n          dir-mode: 0755\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.gcs.bucket","title":"<code>bucket</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the GCS bucket to mount</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.gcs.mountOptions","title":"<code>mountOptions</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Additional mount options for gcsfuse</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.nfs","title":"<code>nfs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount an NFS share. The Cloud Run container must be connected via a VPC connector or direct VPC connection to the subnet where the NFS server is located.</p> <pre><code>root:\n  volumes:\n    volume:\n      nfs: \n        server: 10.0.0.1\n        path: /exports/data\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.nfs.server","title":"<code>server</code>","text":"<p>0.1.0 <code>string</code> <code>^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$</code> </p> <p>IP address or hostname of the NFS server</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.volumes.volume.nfs.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path that is exported by the NFS server</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.network","title":"<code>network</code>","text":"<p>0.1.0 <code>object</code> </p> <p>VPC and networking configuration for the Cloud Run service</p> Direct VPC ConnectionVPC ConnectorCross-Project VPC Access <pre><code>root:\n  network: \n    vpc: my-vpc\n    subnetwork: my-subnet\n    egress: all-traffic\n</code></pre> <pre><code>root:\n  network: \n    egress: private-ranges-only\n    connector: my-connector\n</code></pre> <pre><code>root:\n  network: \n    vpc: projects/other-project/global/networks/my-vpc\n    subnetwork: projects/other-project/regions/us-central1/subnetworks/my-subnet\n    egress: all-traffic\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.network.egress","title":"<code>egress</code>","text":"<p>0.1.0 <code>string</code> <code>private-ranges-only</code> \u00b7 <code>all-traffic</code> <code>private-ranges-only</code></p> <p>The egress type to use for the Cloud Run container if connected to a VPC. In general, use <code>private-ranges-only</code> to reduce latency and bottlenecks when calling external services. Can only be set when <code>connector</code> or <code>vpc</code> and <code>subnetwork</code> are set.</p> <pre><code>root:\n  network:\n    egress: all-traffic\n</code></pre> The <code>root.network</code> setting requires exactly one of the following configurations: connectorvpc"},{"location":"docs/cloudrun/schemas/job/#values.root.network.connector","title":"<code>connector</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/locations/[^/]+/connectors/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC connector to use for the CloudRun container. Uses a serverless VPC access connector. Cannot be used with network.</p> Example 1Example 2 <pre><code>root:\n  network:\n    connector: projects/my-project/locations/us-central1/connectors/my-connector\n</code></pre> <pre><code>root:\n  network:\n    connector: my-connector\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.network.vpc","title":"<code>vpc</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/global/networks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC network to use to create a direct VPC connection. Must be used with subnetwork. Cannot be used with connector.</p> Example 1Example 2 <pre><code>root:\n  network:\n    vpc: projects/my-project/global/networks/my-vpc\n</code></pre> <pre><code>root:\n  network:\n    vpc: my-vpc\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.network.subnetwork","title":"<code>subnetwork</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/regions/[^/]+/subnetworks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC subnetwork to use to create a direct VPC connection. Must be used with vpc. Cannot be used with connector.</p> Example 1Example 2 <pre><code>root:\n  network:\n    subnetwork: projects/my-project/regions/us-central1/subnetworks/my-subnet\n</code></pre> <pre><code>root:\n  network:\n    subnetwork: my-subnet\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.network.tags","title":"<code>tags</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Tags to apply to the network interfaces created for the Cloud Run container. Use the network tags feature of VPC access connectors to control traffic to and from the service.</p> <pre><code>root:\n  network:\n    tags:\n      - tag1\n      - tag2\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.cloudsql","title":"<code>cloudsql</code>","text":"<p>0.1.0 <code>object</code> </p> <p>CloudSQL configuration for the Cloud Run service. If not provided, the service will not be connected to any CloudSQL instances.</p> <p>Info</p> <p>Defining this will automatically inject a <code>CLOUD_SQL_CONNECTION</code> environment variable with the format <code>/cloudsql/project:region:instance</code>. Some libraries will automatically append the required <code>/.s.PGSQL.5432</code> suffix to connect to the correct unix socket, while others do not. The environment variable is provided without the socket suffix.</p> Direct CloudSQL Connection in same regionDirect CloudSQL Connection in different region <pre><code>root:\n  cloudsql: \n    instance: my-instance\n    project: my-project\n</code></pre> <pre><code>root:\n  cloudsql: \n    instance: my-instance\n    project: my-project\n    region: europe-west1\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.cloudsql.instance","title":"<code>instance</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL instance name.</p> <pre><code>root:\n  cloudsql:\n    instance: my-instance\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.cloudsql.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL project name.</p> <pre><code>root:\n  cloudsql:\n    project: my-project\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.cloudsql.region","title":"<code>region</code>","text":"<p>0.1.0 <code>string</code> <code>.region</code></p> <p>CloudSQL region. Defaults to the region of the Cloud Run service.</p> <pre><code>root:\n  cloudsql:\n    region: us-central1\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.executionEnvironment","title":"<code>executionEnvironment</code>","text":"<p>0.1.0 <code>string</code> <code>gen2</code> \u00b7 <code>gen1</code> <code>gen2</code></p> <p>The execution environment to use for the Cloud Run container.</p> <pre><code>root:\n  executionEnvironment: gen1\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.launchStage","title":"<code>launchStage</code>","text":"<p>0.1.0 <code>string</code> <code>ALPHA</code> \u00b7 <code>BETA</code> \u00b7 <code>GA</code> <code>BETA</code></p> <p>The launch stage of the Cloud Run service. Controls feature availability.</p> <pre><code>root:\n  launchStage: GA\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.binaryAuthorization","title":"<code>binaryAuthorization</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enforce Binary Authorization policy for this service.</p> <pre><code>root:\n  binaryAuthorization: true\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.encryption","title":"<code>encryption</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The KMS key to use for encrypting this service. Must be located in the same region and project as the Cloud Run service.</p> <pre><code>root:\n  encryption: \n    key: my-key\n    keyring: my-keyring\n</code></pre>"},{"location":"docs/cloudrun/schemas/job/#values.root.encryption.key","title":"<code>key</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS key to use for encrypting this service.</p>"},{"location":"docs/cloudrun/schemas/job/#values.root.encryption.keyring","title":"<code>keyring</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS keyring where the key is stored.</p>"},{"location":"docs/cloudrun/schemas/job/CHANGELOG/","title":"Changelog","text":""},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#0.1.1","title":"0.1.1(https://github.com/helmless/helmless/compare/google-cloudrun-job-v0.1.0...google-cloudrun-job-v0.1.1) (2025-03-21)","text":""},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>trigger release and set new icon (81d71db)</li> </ul>"},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#0.1.0","title":"0.1.0 (2025-03-19)","text":""},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#features","title":"Features","text":"<ul> <li>extract common helm chart and schema (d8e1d69)</li> </ul>"},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>derefenrence schema before commit (637b754)</li> </ul>"},{"location":"docs/cloudrun/schemas/job/CHANGELOG/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>release 0.1.0 (f455943)</li> <li>release 1.0.0 (f455943)</li> <li>release 1.0.0 (f455943)</li> </ul>"}]}