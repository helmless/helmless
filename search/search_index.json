{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/","title":"Contributing","text":"WOW \ud83d\ude0d   Amazing to see you here!   It is people like you that make the Helmless project possible."},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>We welcome any contributions to the Helmless project, be it code, documentation, helping out other users or just a friendly hello in our Discord server.</p>"},{"location":"contributing/#repositories","title":"\ud83c\udfd7\ufe0f Repositories","text":"<p>To help organize the Helmless project, we have grouped the repositories by prefixing them with the cloud provider, e.g. <code>google-cloudrun-*</code>.</p>"},{"location":"contributing/#core-repositories","title":"\ud83e\udeb4 Core Repositories","text":"<ul> <li>helmless - The Helmless homepage and documentation</li> <li>template-action - Basic GitHub Action for templating Helm charts, merging values on the fly</li> </ul>"},{"location":"contributing/#google-cloud-run-repositories","title":"\ud83d\ude80 Google Cloud Run Repositories","text":"<ul> <li>google-cloudrun-action - Deployment action for Google Cloud Run wrapping the <code>gcloud</code> CLI and template-action</li> <li>google-cloudrun-charts - Helm charts for Google Cloud Run Jobs and Services</li> <li>google-cloudrun-service-terraform-module - Supporting Terraform module for creating a Helmless Google Cloud Run Service</li> <li>google-workload-identity-federation-terraform-module - Supporting Terraform module for setting up GitHub Actions to deploy to Google Cloud Run using Workload Identity Federation</li> </ul>"},{"location":"contributing/#miscellaneous-repositories","title":"\ud83d\uddc3\ufe0f Miscellaneous Repositories","text":"<ul> <li>gcp-infrastructure - The GCP infrastructure for the Helmless project to setup the CI/CD end-to-end testing pipelines</li> </ul>"},{"location":"contributing/#tooling","title":"\ud83d\udee0\ufe0f Tooling","text":"<p>We use asdf to manage the tools and dependencies and pre-commit to check if everything is fine before committing.</p> <p>To setup the development environment, install asdf and the following plugins:</p> <pre><code>asdf plugin add python\nasdf plugin add helm\nasdf plugin add helm-docs\nasdf plugin add pre-commit\n</code></pre> <p>Then install the tools and dependencies:</p> <pre><code>asdf install\n</code></pre> <p>After that install the pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"contributing/#contributing-to-the-documentation","title":"\ud83e\udd1d Contributing to the Documentation","text":"<p>The documentation is built with MkDocs for Material and hosted on GitHub Pages.</p> <p>To run the documentation locally, you can use the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>For more information on how to contribute to the documentation, please refer to the CONTRIBUTING.md file of the <code>helmless</code> repository. That is the place where the documentation is built and hosted.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Here are some of the most common questions about Helmless.</p> <p>Not finding what you're looking for?</p> <p>If you don't find what you're looking for, please join the Discord server and ask away!</p> What is Helmless? <p>Helmless is a tool that allows you to deploy your application containers to Google Cloud Run using a simple YAML file.</p> <p>It's designed to be a simple and easy to use tool for deploying application containers to Google Cloud Run, without the need to have a Kubernetes cluster or use Terraform.</p> <p> Learn more</p> Why not use Terraform? <p>Terraform is a great tool for managing infrastructure as code, but especially for frequent deployments it can quickly become a bottleneck. Infrastructure changes should be carefully managed and gated, and not be a part of the fast feedback loop that developers expect for deploying their own code as an application container.</p> <p>That's why we created Helmless.</p> <p> Learn more</p> Why not use Kubernetes? <p>Kubernetes comes with lots of complexity and a high opportunity cost, especially for small teams. In addition, Google Cloud Run for example is a lot cheaper than running your own Kubernetes cluster.</p> <p>That doesn't mean that you should never use Kubernetes, but it there are (lots of) cases where it's not the best solution.</p> <p>Helmless provides an alternative to Kubernetes for bringing a similar developer experience to Google Cloud Run.</p> <p> Learn more</p> Is Helmless available for other cloud providers, like AWS or Azure? <p>Helmless currently only supports Google Cloud Run, but any contributions are welcome!</p> <p>Join the Discord server to help us build Helmless for other cloud providers.</p> <p> Learn more</p> How can I reference a Helmless Cloud Run Service in my Terraform code? <p>We provide a Terraform module that acts as a shell for the Helmless Cloud Run Service. This way you get the best of both worlds:</p> <ul> <li>Simple and fast deployments directly from the CI/CD pipeline of your application</li> <li>Terraform to manage the underlying infrastructure and permissions</li> </ul> <p> Learn more</p> How does Helmless authenticate with Google Cloud? <p>Helmless runs in your own CI/CD pipeline, so the authentication is completely up to you.</p> <p>However to make things easier, we provide a guide and Terraform modules to use Workload Identity Federation with Github Actions for authenticatation with Google Cloud.</p> <p> Learn more</p> How can I deploy a Helmless Cloud Run Service to multiple regions? <p>Helmless currently only supports deploying to a single region, but this is on our list of features to add.</p> <p>Contributions are welcome!</p> <p> Learn more</p> Can I use sidecars with Helmless? <p>Helmless currently does not support sidecars. But this is on our list of features to add.</p> <p>Contributions are welcome!</p> <p> Go to Issue #4</p> Does it support traffic splitting on new revisions? <p>Helmless currently does not support traffic splitting on new revisions.</p> <p>Contributions are welcome!</p> <p> Learn more</p> Does it support all the features of Cloud Run? <p>Yes it does.</p> <p>With the exception of sidecars and traffic splitting on new revisions, Helmless supports all Cloud Run features.</p> <p>Contributions are welcome!</p> <p> Learn more</p> How can I migrate from regular Terraform to Helmless? <p>Right now the migration is not fully automated, but we are working on creating a Helmless CLI to help with the migration.</p> <p>There is documentation on how to migrate from Terraform to Helmless in the Helmless Cloud Run Service documentation.</p> <p> Learn more</p> How hard is it to extend the chart / add features? <p>Both charts (Job and Service) are built on top of the Google Cloud Run <code>common</code> library chart. This allows you to overwrite some of the helper functions to customize the chart to your needs.</p> <p>The other option would be to contribute or fork the individual charts and extend them to your needs.</p> <p> Learn more</p> Can I template the chart locally first to see changes? <p>Yes you can!</p> <p>You can use the <code>helm template</code> command to template the chart locally first to see changes.</p> <p> Learn more</p> Can I deploy multiple services from the same pipeline? <p>Yes you can!</p> <p>See the configuration guide and examples for more information.</p> <p> Learn more</p> Is there a way to plan changes like with Terraform? <p>Yes there is. You can use <code>dry_run</code> flag in the Github Action or the <code>--dry-run</code> flag in the <code>gcloud</code> CLI.</p> <p>A diff command is coming to the Helmless CLI to make it easier to review the changes.</p> <p> Learn more</p> Can I specify per environment settings for dev, prd,... ? <p>Yes you can provide multiple <code>values.yaml</code> files to the <code>helm template</code> command to specify per environment settings for dev, prd,...</p> <p>See the configuration guide for more information.</p> <p> Learn more</p> When not to use Helmless? <p>It comes down to your specific use-case, requirements and setup.</p> <p>Take a look at the Adoption Guide for more information.</p> <p> Learn more</p>"},{"location":"why-helmless/","title":"Why Helmless?","text":"<p>Fast and easy deployments are critical for velocity. However, some organizations find Kubernetes too complex and Terraform too slow.</p> <p>Helmless bridges this gap and provides fast and flexible deployments without requiring Kubernetes.</p>"},{"location":"why-helmless/#faster-deployment-times","title":"\ud83d\ude80 Faster Deployment Times","text":"<p>By switching to Helmless, you can reduce the time it takes to deploy your containers to Google Cloud Run from hours to minutes. Terraform is not built for fast iterations and continuous delivery. That however is exactly what you need for the deployment of your containers.</p> <p>Helmless bypasses Terraform and directly integrates with your app repository. It uses Helm to render the Google Cloud Run manifest and then directly deploys it using the <code>gcloud</code> CLI.</p> *Manually setting the image tag from the app repository in a Terraform monorepository; waiting for plan preview and pull request review; repeating this process up to three times, once per stage."},{"location":"why-helmless/#higher-deployment-frequency","title":"\u2b50 Higher Deployment Frequency","text":"<p>Helmless allows you to deploy your containers to Google Cloud Run at any time, without waiting for the long approval and preview process of infrastructure changes done in Terraform. It can be directly integrated into your CI/CD pipeline and unlocks the full potential of continuous delivery.</p> By using Helmless, 1KOMMA5\u00b0 significantly improved deployment times and frequency to Google Cloud Run."},{"location":"why-helmless/#getting-started","title":"Getting Started","text":"<ul> <li> <p> What is Helmless?</p> <p>Learn what Helmless is, how it works and why it's different from other tools.</p> <p> Learn more</p> </li> <li> <p> Helmless Architecture</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Understand the Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience and deploy your first service to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations, including a complete CI/CD pipeline.</p> <p> View Examples</p> </li> </ul>"},{"location":"why-helmless/#why-not-use-terraform","title":"Why not use Terraform?","text":"<p>Terraform is a great tool for managing infrastructure as code, but especially for frequent deployments it can quickly become a bottleneck. Infrastructure changes should be carefully managed and gated, and not be a part of the fast feedback loop that developers expect for deploying their own code as an application container.</p> <p>With the increasing size of the stack, the plan and apply times of Terraform can quickly become a bottleneck.</p> <p>But we also recognize that you still need to somehow link the application container to the underlying infrastructure. This is why we created the helmless/google-cloudrun-service-terraform-module that creates a Terraform shell for your application container, which you can then use in your Terraform code to link the application container to the underlying infrastructure.</p>"},{"location":"why-helmless/#why-not-use-kubernetes","title":"Why not use Kubernetes?","text":"<p>Every team and organization is different, and so are their infrastructure and application requirements. Kubernetes is a great tool for managing containerized applications, but it's not the only tool for the job. And often times you don't need the full power of Kubernetes. But in the end, it's up to you to decide what's best for your team and organization.</p> <p>Helmless just offers a different path to deploy your application containers, without the need to have a Kubernetes cluster or use Terraform.</p>"},{"location":"why-helmless/#why-use-helm","title":"Why use Helm?","text":"<p>Helm is a great tool for managing containerized applications, and its templating feature offers a great developer experience. It allows you to define your application container specification in a very simple YAML file and gives the platform teams an easy way to add abstractions and customizations on top of it, making container-based deployments a breeze.</p> <p>However by default Helm is built for Kubernetes, which brings a lot of overhead and complexity for container-based deployments, where often times you don't need the full power of Kubernetes. And small teams and organizations often don't have the resources to maintain a production-grade Kubernetes cluster.</p> <p>Helmless aims to give you the developer experience of Helm, without the overhead of Kubernetes. It does this by only using Helm's templating feature, linting and schema validation and not the full Helm CLI.</p>"},{"location":"_partials/architectur-diagram/","title":"Architectur diagram","text":"<pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"_partials/wip/","title":"Wip","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p>"},{"location":"discord/","title":"Discord","text":"<p>Join the Helmless Discord community.</p>"},{"location":"docs/","title":"Helmless Documentation","text":"Welcome \ud83d\udc4b\ud83c\udffb   So glad you're here!"},{"location":"docs/#welcome-to-helmless","title":"Welcome to Helmless","text":"<p>Helmless is a workflow and collection of resources that allows you to deploy serverless containers to Google Cloud Run, and potentially other platforms (1), with Helm, bypassing the complexity of Kubernetes and Terraform.</p> <ol> <li> See the extending to other platforms page for more information.</li> </ol> <p>It takes a container specification in the form of a Helm chart and a values file, and uses the templating feature of Helm to generate a Cloud Run manifest. This manifest is then deployed using the <code>gcloud</code> CLI.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre> <p>Helmless gives you a powerful serverless deployment workflow that is very simple to use, yet flexible and extensible. It can be easily integrated into your existing CI/CD pipeline and is fully compatible with Helm charts and all tooling surrounding it.</p> <ul> <li> <p> Why Helmless?</p> <p>Not convinced yet? Learn why you should use Helmless and why it's different from other tools.</p> <p> Learn the WHY</p> </li> <li> <p> Helmless Architecture</p> <p>Understand the architecture, technical details behind Helmless, and how to extended it to other platforms.</p> <p> Understand the Architecture</p> </li> <li> <p> Deploy Your First Service</p> <p>Get hands-on experience and deploy your first service to Google Cloud Run with Helmless</p> <p> Get Started</p> </li> <li> <p> Examples</p> <p>Explore real-world examples and sample configurations, including a complete CI/CD pipeline.</p> <p> View Examples</p> </li> </ul>"},{"location":"docs/cloudrun/","title":"Google Cloud Run","text":"<p>Google Cloud Run is the first platform for which Helmless was adopted.</p> <ul> <li> <p> 5min Quick Start</p> <p>Learn how to deploy your first Google Cloud Run Service in 5 minutes</p> <p> Get Started</p> </li> <li> <p> CI/CD with Github Actions</p> <p>Learn how to deploy your container to Google Cloud Run using Github Actions</p> <p> Learn More</p> </li> <li> <p> Examples</p> <p>See real-world implementations of Helmless for Google Cloud Run</p> <p> View Examples</p> </li> <li> <p> Using Terraform</p> <p>Learn how you can tie in your Google Cloud Run Service to your GCP infrastructure using Terraform</p> <p> Learn More</p> </li> </ul>"},{"location":"docs/cloudrun/ci-cd/","title":"CI/CD with Github Actions","text":"<p>Helmless is designed to be used in any CI/CD pipeline to deploy your container to the cloud provider of your choice. Since we use Github Actions as our CI/CD platform of choice, this guide will show you how to deploy your container to Google Cloud Run using Github Actions.</p> <p>Helmless provides a Github Action that you can use in your workflow to deploy your container to Google Cloud Run.</p> <p>Contributing other CI/CD Platforms</p> <p>If you want to extend Helmless to other CI/CD platforms, we kindly ask you to get in touch and contribute to the project.</p>"},{"location":"docs/cloudrun/ci-cd/#prerequisites","title":"Prerequisites","text":"<p>Before you can start using Github Actions to deploy your container to Google Cloud Run, you need to allow your Github repository access to your GCP project.</p> <p>See the Terraform guide for more information on how to do this.</p>"},{"location":"docs/cloudrun/ci-cd/#github-deployment-action","title":"Github Deployment Action","text":"<p>You can find a full example of a Github Actions workflow in the GitHub repository.</p> <p>Here is a simplified version of the workflow with matrix deployment for multiple services:</p> deploy.yml<pre><code>name: \ud83d\ude80 Deploy Cloud Run Service\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: \ud83d\ude80 helmless-service\n    runs-on: ubuntu-24.04\n    permissions:\n      contents: read\n      id-token: write\n    concurrency:\n      group: helmless-service\n\n    steps:\n      - name: \ud83d\udce5 Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udd11 Google Auth\n        id: auth\n        uses: google-github-actions/auth@v2\n        with:\n          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }} (1)\n\n      - name: \ud83d\ude80 Deploy Service\n        uses: helmless/google-cloudrun-action@v1 (6)\n        id: deploy\n        with:\n          files: |\n            helmless/values.yaml (2)\n          chart: oci://ghcr.io/helmless/google-cloudrun-service (3)\n          chart_version: \"latest\" (4)\n          dry_run: false (5)\n</code></pre> <ol> <li>The <code>GCP_WORKLOAD_IDENTITY_POOL</code> is the workload identity pool you created in the Github Workload Identity Federation section.</li> <li>The <code>files</code> argument takes one or more <code>values.yaml</code> files. In this example we use a single <code>helmless/values.yaml</code> file that was created in the Getting Started guide. The files are applied in the order they are listed. So if you need to override values in a specific file, you can do so by listing the file with the higher precedence last.</li> <li>The Helmless chart to use for the templating. Defaults to <code>oci://ghcr.io/helmless/google-cloudrun-service</code>. See packages for a list of available charts.</li> <li>The version of the Helm chart to deploy. <code>latest</code> and all valid Helm chart version ranges are supported.</li> <li>If true the template will only be validated against the GCP Cloud Run API but not deployed.</li> <li>The version of the Helmless Github Action to use. Make sure to use the latest version.</li> </ol> <p>Helmless Github Action</p> <p>You can find more examples in the Readme of the helmless/google-cloudrun-action and the e2e tests.</p>"},{"location":"docs/cloudrun/examples/","title":"Cloud Run Examples","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>For now, you can find examples in the GitHub repository under the e2e tests and the related CI/CD pipeline.</p> <p>There also is a google-cloudrun-example repository that shows a full example of a Helmless application deployed to Google Cloud Run across multiple environments.</p>"},{"location":"docs/cloudrun/migrate/","title":"Migrate from Terraform to Helmless","text":"<p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>This guide is a work in progress, but the basic steps are:</p> <ol> <li>Export your current Cloud Run YAML configuration using <code>gcloud run services describe --format=yaml &gt; service.yaml</code></li> <li>Map the YAML configuration to the Helmless Helm chart</li> <li>Update your current Terraform Cloud Run module and add <code>lifecycle &gt; ignore_changes</code> to make Helmless authoritative</li> <li>Add the Helmless deployment to your CI/CD pipeline</li> </ol>"},{"location":"docs/cloudrun/quickstart/","title":"Quickstart: Deploy to Google Cloud Run","text":"<p>version: 1.0.0    repository: oci://ghcr.io/helmless    alias: service - name: google-cloudrun-job    version: 1.0.0    repository: oci://ghcr.io/helmless    alias: job</p>"},{"location":"docs/cloudrun/quickstart/#prerequisites","title":"Prerequisites","text":"<p>You'll need:</p> <ul> <li>Google Cloud CLI installed</li> <li>Helm CLI installed</li> <li>A Google Cloud account with billing enabled and the <code>roles/run.admin</code> role</li> </ul>"},{"location":"docs/cloudrun/quickstart/#your-first-helmless-application","title":"Your First Helmless Application","text":""},{"location":"docs/cloudrun/quickstart/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<ol> <li> <p>Login to Google Cloud:    <pre><code>gcloud auth login\n</code></pre></p> </li> <li> <p>Set your project and region:    <pre><code>gcloud config set project YOUR_PROJECT_ID\ngcloud config set run/region europe-west1  # or your preferred region\n</code></pre></p> </li> </ol>"},{"location":"docs/cloudrun/quickstart/#step-2-create-your-application-chart","title":"Step 2: Create Your Application Chart","text":"<p>Create a new directory for your service and initialize a Helm chart:</p> <pre><code>helm create helmless &amp;&amp; cd helmless\nrm -rf helmless/templates/* &amp;&amp; rm -f helmless/values.yaml\necho \"output\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"docs/cloudrun/quickstart/#step-3-add-the-helmless-charts","title":"Step 3: Add the Helmless Charts","text":"<p>You now need to add the Helmless charts as dependencies to your application chart.</p> <ol> <li>Add the Helmless chart to your service:    <pre><code>cat &lt;&lt;EOF &gt;&gt; Chart.yaml\n\ndependencies:\n  - name: google-cloudrun-service (1)\n    version: 1.0.0\n    repository: oci://ghcr.io/helmless\n    alias: service (2)\nEOF\n</code></pre></li> <li>Run <code>helm dependency update</code> to update the dependencies:    <pre><code>helm dependency update\n</code></pre></li> </ol> <ol> <li>This adds the Helmless Google Cloud Run Service chart as a dependency to your application chart.</li> <li>This aliases the Helmless chart as <code>service</code> so we can refer to it in the <code>values.yaml</code> file.</li> </ol>"},{"location":"docs/cloudrun/quickstart/#step-4-configure-your-service","title":"Step 4: Configure Your Service","text":"<p>Now you can configure your service using the <code>values.yaml</code> file.</p> <pre><code>cat &lt;&lt;EOF &gt; values.yaml\nglobal:\n  region: \"$(gcloud config get run/region)\"\n  project: \"$(gcloud config get project)\"\nservice:\n  name: hello-helmless (1)\n  image:\n    name: \"cloudrun/container/hello\"\n    repository: \"us-docker.pkg.dev\"\n    tag: \"latest\"\n  env:\n    COLOR: \"blue\" (2)\nEOF\n</code></pre> <ol> <li>This is the name of your service, which must be unique within your project and region combination.</li> <li>This is an environment variable that will be set in the container.</li> </ol> <p>Google Cloud Run Service Schema</p> <p>You can find the full schema for the Google Cloud Run Service here.</p>"},{"location":"docs/cloudrun/quickstart/#step-5-template-the-cloud-run-service-manifest","title":"Step 5: Template the Cloud Run Service Manifest","text":"<p>Next, you can template the Cloud Run Service manifest using the <code>helm template</code> command.</p> <pre><code>helm template --output-dir output .\n</code></pre> <p>This will generate a <code>service.yaml</code> manifest in the <code>output</code> directory that can be used to deploy your service using the <code>gcloud</code> CLI.</p>"},{"location":"docs/cloudrun/quickstart/#step-6-deploy-your-service","title":"Step 6: Deploy Your Service","text":"<p>You can now deploy your service using the <code>gcloud</code> CLI.</p> <pre><code>gcloud run services replace output/**/service.yaml\n</code></pre> <p>That's it! Your service is now deployed to Google Cloud Run.</p>"},{"location":"docs/cloudrun/quickstart/#step-7-test-your-service","title":"Step 7: Test Your Service","text":"<ol> <li>Start the Cloud Run proxy:    <pre><code>gcloud run services proxy hello-helmless\n</code></pre></li> </ol> <ol> <li>Open http://localhost:8080 in your browser</li> </ol> <p>You should see a blue-themed \"Hello World\" page! \ud83c\udf89</p>"},{"location":"docs/cloudrun/quickstart/#step-8-add-a-second-environment","title":"Step 8: Add a Second Environment","text":"<p>Let's simulate a development environment by adding a <code>values.dev.yaml</code> file.</p> <ol> <li> <p>Create a <code>values.dev.yaml</code> file:    <pre><code>cat &lt;&lt;EOF &gt; values.dev.yaml\nservice:\n  env:\n    COLOR: \"green\"\nEOF\n</code></pre></p> </li> <li> <p>Re-run the template with the new values:    <pre><code>helm template --output-dir output -f values.dev.yaml .\n</code></pre></p> </li> <li> <p>Deploy the new manifest:    <pre><code>gcloud run services replace output/**/service.yaml\n</code></pre></p> </li> <li> <p>Refresh your browser to see the new color!</p> </li> </ol>"},{"location":"docs/cloudrun/quickstart/#clean-up","title":"Clean Up","text":"<p>When you're done, delete the service:</p> <pre><code>gcloud run services delete hello-helmless\n</code></pre>"},{"location":"docs/cloudrun/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li> <p> CI/CD with Github Actions</p> <p>Learn how to deploy your Helmless chart using Github Actions.</p> <p> Learn More</p> </li> <li> <p> Cloud Run Schemas</p> <p>See the full schema for the Google Cloud Run Service and Job.</p> <p> View Schema</p> </li> <li> <p> Examples</p> <p>See an example of a Helmless chart for Google Cloud Run.</p> <p> View Examples</p> </li> <li> <p> Architecture</p> <p>Learn more about Helmless and how it works.</p> <p> Learn More</p> </li> </ul>"},{"location":"docs/cloudrun/terraform/","title":"Terraform","text":"<p>Helmless provides a Terraform shell for your application container, which you can then use in your Terraform code to link the application container to the underlying infrastructure. It does this by using the <code>lifecycle &gt; ignore_changes</code> block of the Terraform resource, ignoring all fields that are managed by Helmless.</p> <p>You can either use the Helmless modules directly or create your own shell.</p>"},{"location":"docs/cloudrun/terraform/#helmless-cloud-run-service-terraform-module","title":"Helmless Cloud Run Service Terraform Module","text":"<p>The Helmless Cloud Run Service Terraform Module is a Terraform module that is used to create a shell for your application container. It is located in the helmless/google-cloudrun-service-terraform-module repository.</p> <pre><code>module \"github_federation\" {\n  source              = \"github.com/helmless/google-workload-identity-federation-terraform-module?ref=v0.1.0\"\n  id                  = \"github\"\n  github_organization = \"helmless\"\n}\n\nmodule \"cloudrun_service\" {\n  # source = \"github.com/helmless/google-cloudrun-service-terraform-module?ref=v0.1.2\" # x-release-please-version\n  source = \"../\"\n  name   = \"example-service\"\n\n  create_service_account = true\n  deployment_accounts    = [\"${module.github_federation.repository_principal_set_id_prefix}/example-repository\"]\n}\n</code></pre> <p>The workload identity federation is used to securely connect Github Actions to GCP and give it the necessary permissions to deploy the application container. See below or in the CI/CD documentation for more details.</p>"},{"location":"docs/cloudrun/terraform/#creating-your-own-shell","title":"Creating your own shell","text":"<p>If you don't want to use the Helmless Cloud Run Service Terraform Module, you can create your own shell by using the <code>lifecycle &gt; ignore_changes</code> block of the Terraform resource.</p> <pre><code>resource \"google_cloud_run_v2_service\" \"cloud_run_service\" {\n  ...\n  # This will make the app pipeline with Helmless the authoritive source of truth for the service.\n  lifecycle {\n    ignore_changes = [\n      binary_authorization,\n      client,\n      client_version,\n      description,\n      ingress,\n      labels,\n      launch_stage,\n      template,\n      traffic,\n    ]\n  }\n}\n</code></pre> <p>A module for the job is in progress, for now you can use the same approach and make the module yourself. Contributions are welcome!</p> <pre><code>resource \"google_cloud_run_v2_job\" \"cloud_run_job\" {\n  ...\n  lifecycle {\n    ignore_changes = [\n      binary_authorization,\n      client,\n      client_version,\n      labels,\n      launch_stage,\n      location,\n      template,\n    ]\n  }\n}\n</code></pre>"},{"location":"docs/cloudrun/terraform/#workload-identity-federation","title":"Workload Identity Federation","text":"<p>To allow your Github organization to access your GCP organization, you need to setup Github Workload Identity Federation once somewhere in a project of your organization.</p> <p>To make this as easy as possible, we created a small Terraform module that can be used to setup the necessary resources in your GCP project.</p> <p>Deploy it however you deploy your  infrastructure and make sure to update the <code>github_organization</code> variable to match your Github organization.</p> workload-identity.tf<pre><code>module \"github_federation\" {\n  source              = \"github.com/helmless/google-workload-identity-federation-terraform-module?ref=v0.1.0\"\n  github_organization = \"helmless\"\n}\n</code></pre> <p>Applying this module you will get:</p> <ul> <li>a workload identity pool (1)</li> <li>a workload identity provider for your Github repository (2)<ul> <li>that only allows repositories in your Github organization to authenticate with the workload identity pool</li> </ul> </li> </ul> <ol> <li>A workload identity pool is a container for your workload identities. It uses the <code>google_iam_workload_identity_pool</code> Terraform resource.</li> <li>A workload identity provider is a reference to the Github OIDC identity provider. It uses the <code>google_iam_workload_identity_pool_provider</code> Terraform resource and is scoped to only allow tokens issued by Github and from repositories in your specified organization.</li> </ol>"},{"location":"docs/cloudrun/terraform/#creating-cloud-run-services-with-iam","title":"Creating Cloud Run Services with IAM","text":"<p>After setting up the workload identity federation, you can create the individual Cloud Run services and grant your Github repositories the necessary permissions to deploy to them.</p> <p>principalSet</p> <p>The <code>principalSet</code> is similar to a <code>serviceAccount</code> but is tightly coupled to a workload identity pool. It is the safest way to grant permissions to a repository. You can use this for more than just Cloud Run, it can be used for almost any resource in GCP. The helmless/google-workload-identity-federation-terraform-module//repository sub module takes care of creating the somewhat complicated format of the <code>principalSet</code> for you.</p> cloudrun.tf<pre><code>locals {\n  github_organization = \"helmless\"\n  repositories = [\n    \"helmless\",\n    \"google-cloudrun-action\",\n    \"google-cloudrun-charts\"\n  ]\n}\n\nmodule \"workload_identity\" {\n  for_each = toset(local.repositories)\n  source   = \"github.com/helmless/google-workload-identity-federation-terraform-module//repository?ref=v0.2.0\"\n\n  repository = \"${local.github_organization}/${each.key}\" # (1)\n}\n\nmodule \"cloudrun_service_e2e_test\" {\n  source = \"github.com/helmless/google-cloudrun-service-terraform-module?ref=v0.1.2\"\n\n  name   = \"full-service\" # (2)\n  region = \"europe-west1\"\n\n  deployment_accounts    = values(module.workload_identity).*.principal_set # (3)\n  create_service_account = true # (4)\n\n  deletion_protection = false\n}\n</code></pre> <ol> <li>Use your own <code>github_organization</code> and <code>repositories</code> to create the correct <code>principalSet</code> for your repositories.</li> <li>This name must match the <code>name</code> in the values.yaml of your Helmless deployment.</li> <li>The deployment account is a list of repository principals that will be granted the <code>roles/run.admin</code> role on the Cloud Run service in order to deploy it. In a real scenario this will just be one repository.</li> <li>By default the module will create a new service account just for the Cloud Run service. This is best practice as it allows you to scope the permissions to the individual service account. You must set the <code>serviceAccountName</code> in your values.yaml to use this.</li> </ol>"},{"location":"docs/cloudrun/terraform/#project-wide-permissions","title":"Project wide permissions","text":"<p>You can also grant your repositories project wide permissions to create and deploy Cloud Run services. This is more permissive and should only be used in a development environment or for dynamic creation of feature branch deployments for example. By default Helmless will create the Cloud Run service if it doesn't exist yet.</p> cloud_deploy.tf<pre><code>locals {\n  repositories = [\n    \"helmless\",\n    \"google-cloudrun-action\",\n    \"google-cloudrun-charts\",\n    \"google-cloudrun-example\"\n  ]\n}\n\ndata \"google_project\" \"project\" {}\n\nmodule \"principal_set\" {\n  for_each = toset(local.repositories)\n  source   = \"github.com/helmless/google-workload-identity-federation-terraform-module//repository?ref=v0.2.0\"\n\n  repository = \"${local.github_organization}/${each.key}\" # (1)\n}\n\nresource \"google_project_iam_member\" \"run_admin\" {\n  for_each = toset(local.repositories)\n  project  = data.google_project.project.project_id\n  role     = \"roles/run.admin\"\n  member   = module.principal_set[each.key].principal_set # (2)\n}\n\nresource \"google_service_account_iam_member\" \"cloud_run_service_account_user\" {\n  for_each = toset(local.repositories)\n\n  service_account_id = \"projects/${data.google_project.project.project_id}/serviceAccounts/${data.google_project.project.number}-compute@developer.gserviceaccount.com\" # (3)\n  role               = \"roles/iam.serviceAccountUser\"\n  member             = module.principal_set[each.key].principal_set # (4)\n}\n</code></pre> <ol> <li>Use your own <code>github_organization</code> and <code>repositories</code> to create the correct <code>principalSet</code> for your repositories.</li> <li>This grants every repository listed above the <code>roles/run.admin</code> role in the whole GCP project.</li> <li>This is the default Cloud Run service account used if no specific service account is specified in the values.yaml.</li> <li>The <code>roles/iam.serviceAccountUser</code> is required by Cloud Run to deploy the service.</li> </ol> <p>Success</p> <p>You have now setup the necessary resources to allow your Github repository to access your GCP project and to deploy your container to Google Cloud Run.</p>"},{"location":"docs/cloudrun/values/","title":"Helmless Values","text":"<p>The values.yaml file of the Helmless Helm chart is used to configure the service or job and controls everything.</p> <p>Page under construction</p> <p>\ud83d\udea7 This page is under construction. \ud83d\udea7</p> <p>For now see the schemas for the available options.</p>"},{"location":"docs/helmless/","title":"Using Helmless","text":"<p>Helmless is a tool that allows you to deploy your application containers to Google Cloud Run.</p> <p>It is built on top of Helm and Google Cloud Run, and provides a simple way to deploy your application containers to Google Cloud Run.</p> <p>Why Helmless?</p> <p>See Why Helmless? for more information.</p>"},{"location":"docs/helmless/adopting/","title":"Adopting Helmless","text":"<p>Adopting something new is always a challenge, but we've put together some tips to help you get started.</p> <p>General advice</p> <p>The following guide is scoped to Helmless, but the same principles apply to any platform initiative. See your platform as a product and your platform team as a startup within your organization.</p> <p>Be user-centric and focus on the value you can deliver by solving real problems for the users of your platform.</p>"},{"location":"docs/helmless/adopting/#convince-your-team","title":"Convince your team","text":"<p>Before you can start adopting Helmless, you need to convince your team that it's a good idea and brings value to both the team and organization.</p> <p>Ask the following questions together with your team:</p> <ul> <li>How do you currently deploy your applications?</li> <li>What problems do you have with the current deployment process?</li> <li>How would Helmless solve those problems?</li> <li>Do you use Terraform to manage those application deployments and is it painful?</li> <li>Why is it painful?</li> <li>Do you already have a Kubernetes cluster?</li> <li>If yes, are there reasons why you don't use Kubernetes for your applications?</li> <li>Do you already use Google Cloud Run?</li> </ul> <p>Use these questions to guide the conversation in your team and involve the users of your platform to help you understand the current state and the pain points.</p>"},{"location":"docs/helmless/adopting/#set-up-succes-metrics","title":"Set up succes metrics","text":"<p>Consider setting up one or more succes metrics before you start adopting Helmless. This way you can measure the before and after of adopting Helmless. This helps to convince the team and organization that adopting Helmless is time well spent.</p> <p>The DORA metrics are a good starting point, especially:</p> <ul> <li>Deployment frequency (how often you deploy)</li> <li>Change lead time (time from code commit to production)</li> </ul> <p>You should try to measure those per application, even for the Terraform deployments before you start adopting Helmless.</p>"},{"location":"docs/helmless/adopting/#start-small","title":"Start small","text":"<p>Start by deploying a new application using Helmless to get a feel for it. Then migrate one of your internal platform services to Helmless. This will help you dogfood Helmless within your team and show the value it can bring.</p> <p>Once you have worked out and seen the value of Helmless, put together a short demo for your users and stakeholders. Make it flashy and make the current problem really obvious. Show the pain. And then show how Helmless can solve those problems.</p> <p>Optionally create some artifical scarcity and ask for teams to file an application for the beta program to adopt Helmless in their team. This way you will get the willing early adopters and can organically grow the user base and acceptance in your organization.</p>"},{"location":"docs/helmless/adopting/#rollout","title":"Rollout","text":"<p>Once you have onboarded a few teams, you will have the first metrics to show the value of Helmless. Get some testimonials from the early adopters and start rolling out Helmless to the rest of the organization.</p> <p>Do some marketing and create some hype, so that 80% of the teams want to use and adopt Helmless. Provide an easy self-service migration path and assist them with the migration.</p> <p>Then run after the remaining 20% of teams and you are done \ud83e\udd73.</p>"},{"location":"docs/helmless/adopting/#party","title":"Party \ud83c\udf89","text":"<p>You did it! You are now a Helmless organization! \ud83c\udf89</p> <p>If you have any questions or need help, please join our Discord server and ask away!</p>"},{"location":"docs/helmless/architecture/","title":"Helmless Architecture","text":"<p>In a nutshell, Helmless is a workflow for templating a custom Helm chart into the cloud provider's specific configuration, and then deploying it using the cloud provider's CLI.</p> <p>Simple but very powerful and adoptable to every cloud provider and CI/CD platform.</p> <pre><code>graph LR\n    A[values.yaml] --&gt; B[CI/CD Pipeline]\n    subgraph B[CI/CD Pipeline]\n        direction LR\n        B1[Template\n        Helmless Chart] --&gt; B2[Deploy using\n        Cloud Provider CLI]\n    end\n    B --&gt; D[Serverless\n    Container]</code></pre>"},{"location":"docs/helmless/architecture/#google-cloud-run","title":"Google Cloud Run","text":"<p>Helmless has been battle tested internally using Google Cloud Run and serves hundreds of containers and production deployments every day. That's why the documentation focuses on Google Cloud Run and it currently is the only platform supported out of the box.</p> <p>Google Cloud Run is a fully managed container platform that allows you to deploy and scale your containers in a serverless way. Under the hood it uses the Knative to provide it's serverless platform. In the Google Cloud Run documentation you can find the full YAML specification that is templated by our Google Cloud Run Helmless chart.</p>"},{"location":"docs/helmless/architecture/#extending-to-other-platforms","title":"Extending to other platforms","text":"<p>Other cloud providers offer their own serverless platforms, like AWS ECS, AWS Fargate, Azure Container Apps, etc. which all support their own YAML specifications.</p> <p>AWS for example offers to use AWS CloudFormation to template your infrastructure as code. By creating a custom Helmless chart that renders into the AWS CloudFormation YAML specification, you can easily deploy your container to AWS as well.</p> <p>Contributing other platforms</p> <p>If you want to extend Helmless to other platforms, we kindly ask you to get in touch and contribute to the project.</p>"},{"location":"docs/helmless/configuration/","title":"Configuration","text":"<p>Helmless works by templating and deploying a Helm chart. Helm charts are configured using the <code>values.yaml</code> file.</p> <p>For Helmless you have two options:</p> <ol> <li>Create a new application Helm chart and add the Helmless charts as dependencies</li> <li>Directly provide the <code>values.yaml</code> file to Helmless and use the Github Action that will automatically pick the Helmless charts to render</li> </ol>"},{"location":"docs/helmless/configuration/#option-1-create-a-new-application-helm-chart","title":"Option 1: Create a new application Helm chart","text":"<p>This is the recommended approach, which brings the following benefits:</p> <ul> <li>Use a dependency update mechanism like dependabot</li> <li>Use Helm compatible tools, like intellisense and linting</li> <li>Deploy multiple applications from the same chart and share values between them</li> </ul> <p>To get started, create a new Helm chart and remove the default templates and values.yaml file.</p> <pre><code>helm create my-app &amp;&amp; rm -rf my-app/templates/* &amp;&amp; rm my-app/values.yaml\n</code></pre> <p>Add the Helmless charts as dependencies to your Helm chart.</p> my-app/Chart.yaml<pre><code>dependencies:\n  - name: google-cloudrun-service\n    version: 1.0.0\n    repository: oci://ghcr.io/helmless\n    alias: service\n  - name: google-cloudrun-job\n    version: 1.0.0\n    repository: oci://ghcr.io/helmless\n    alias: job\n</code></pre> <p>You can add multiple services and jobs to the same chart, just make sure to use different aliases.</p> <p>The config above will allow you to configure the <code>values.yaml</code> like this:</p> my-app/values.yaml<pre><code>global: (1)\n  project: my-project\n  region: europe-west1\n\nenv: &amp;env (2)\n  COMMON_ENV_VAR: my-value\n\nservice:\n  name: my-service\n  env:\n    &lt;&lt;: *env (3)\n    COMMON_ENV_VAR: override-value\n    SERVICE_SPECIFIC_ENV_VAR: my-value\n\njob:\n  name: my-job\n  env:\n    &lt;&lt;: *env\n    JOB_SPECIFIC_ENV_VAR: my-value (4)\n</code></pre> <ol> <li>These global values are shared between all services and jobs</li> <li>You can use YAML anchors to share values between the service and job</li> <li>The common env variables are spread out and can be overridden or extended by the service and job specific variables</li> <li>This is a job only variable and will not be used by the service</li> </ol> <p>You can template the Cloud Run manifests with the following command:</p> <pre><code>helm template my-app\n</code></pre> <p>In the Github Action you can deploy the application with the following workflow. See Github Deployment Action for more details.</p> my-app/.github/workflows/deploy.yaml<pre><code>name: \ud83d\ude80 Deploy Cloud Run Service\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: \ud83d\ude80 helmless-service\n    runs-on: ubuntu-24.04\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n      - name: \ud83d\udce5 Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udd11 Google Auth\n        id: auth\n        uses: google-github-actions/auth@v2\n        with:\n          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }}\n\n      - name: \ud83d\ude80 Deploy Service\n        uses: helmless/google-cloudrun-action@v1\n        id: deploy\n        with:\n          chart: my-app/\n</code></pre>"},{"location":"docs/helmless/configuration/#option-2-directly-provide-the-valuesyaml-file","title":"Option 2: Directly provide the <code>values.yaml</code> file","text":"<p>This is less complex and creates another abstraction layer for your developers, hiding the Helm charts from them. It comes with the downside that you have no out-of-the-box dependency update mechanism and no Helm tooling support.</p> <p>To use this option, you can directly provide the <code>values.yaml</code> file to Helmless and use the Github Action that will automatically pick the Helmless charts to render.</p> my-app/values.yaml<pre><code>name: my-service\nenv:\n  MY_ENV_VAR: my-value\n</code></pre> <p>You can locally template the Cloud Run Service manifest with the following command:</p> <pre><code>helm template oci://ghcr.io/helmless/google-cloudrun-service \\\n  -f my-app/values.yaml \\\n  &gt; my-app/service.yaml\n</code></pre> <p>In the Github Action you can deploy the application with the following workflow. See Github Deployment Action for more details.</p> my-app/.github/workflows/deploy.yaml<pre><code>name: \ud83d\ude80 Deploy Cloud Run Service\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: \ud83d\ude80 helmless-service\n    runs-on: ubuntu-24.04\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n      - name: \ud83d\udce5 Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udd11 Google Auth\n        id: auth\n        uses: google-github-actions/auth@v2\n        with:\n          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }}\n\n      - name: \ud83d\ude80 Deploy Service\n        uses: helmless/google-cloudrun-action@v1\n        id: deploy\n        with:\n          type: service # or job\n          values: |\n            my-app/values.yaml\n</code></pre>"},{"location":"docs/helmless/configuration/#environment-overrides","title":"Environment Overrides","text":"<p>You can override the environment variables for a specific environment by adding a <code>values.&lt;environment&gt;.yaml</code> file in the application directory.</p> my-app/values.dev.yaml<pre><code>env:\n  MY_ENV_VAR: dev-value\n</code></pre> <p>This will override the <code>MY_ENV_VAR</code> environment variable to <code>dev-value</code> for the <code>dev</code> environment.</p> <p>You can also override the global values by adding a <code>values.&lt;environment&gt;.yaml</code> file in the application directory.</p> my-app/values.dev.yaml<pre><code>global:\n  project: dev-project\n</code></pre> <p>This will override the <code>project</code> value to <code>dev-project</code> for the <code>dev</code> environment.</p> <p>Then extend your Github Action workflow to include the environment values file.</p> my-app/.github/workflows/deploy.yaml<pre><code>name: \ud83d\ude80 Deploy Cloud Run Service\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    name: \ud83d\ude80 helmless-service\n    runs-on: ubuntu-24.04\n    permissions:\n      contents: read\n      id-token: write\n\n    steps:\n      - name: \ud83d\udce5 Checkout Repository\n        uses: actions/checkout@v4\n\n      - name: \ud83d\udd11 Google Auth\n        id: auth\n        uses: google-github-actions/auth@v2\n        with:\n          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_POOL }}\n\n      - name: \ud83d\ude80 Deploy Service\n        uses: helmless/google-cloudrun-action@v1\n        id: deploy\n        with:\n          type: service # or job\n          values: |\n            my-app/values.yaml\n            my-app/values.dev.yaml\n</code></pre> <p>You can extract this into a reusable workflow and use matrix deployments to deploy to multiple environments.</p>"},{"location":"docs/schemas/","title":"Google Cloud Run Schemas","text":"<ul> <li> <p> Google Cloud Run Service</p> <p>The schema for the Google Cloud Run Service chart.</p> <p> View Schema </p> </li> <li> <p> Google Cloud Run Job</p> <p>The schema for the Google Cloud Run Job chart.</p> <p> View Schema </p> </li> </ul>"},{"location":"docs/schemas/conventions/","title":"Conventions","text":"<p>This section explains several conventions used in the chart schema documentation.</p>"},{"location":"docs/schemas/conventions/#symbols","title":"Symbols","text":"<p>This documentation use some symbols for illustration purposes. Before you read on, please make sure you've made yourself familiar with the following list of conventions:</p>"},{"location":"docs/schemas/conventions/#version","title":"\u2013 Version","text":"<p>The tag symbol in conjunction with a version number denotes when a specific feature or behavior was added. Make sure you're at least on this version if you want to use it.</p>"},{"location":"docs/schemas/conventions/#default","title":"\u2013 Default value","text":"<p>Some properties in the schemas have default values. The default value of the property is always included.</p>"},{"location":"docs/schemas/conventions/#default","title":"\u2013 Default value is computed","text":"<p>Some default values are not set to static values but computed from other values.</p>"},{"location":"docs/schemas/conventions/#default","title":"\u2013 Default value is empty","text":"<p>Some properties do not contain default values. This means that the functionality that is associated with them is not available unless explicitly enabled.</p>"},{"location":"docs/schemas/conventions/#feature","title":"\u2013 Optional feature","text":"<p>Some features are optional and must be explicitly enabled by setting the property.</p>"},{"location":"docs/schemas/conventions/#experimental","title":"\u2013 Experimental","text":"<p>Some newer features are still considered experimental, which means they might (although rarely) change at any time, including their complete removal.</p>"},{"location":"docs/schemas/conventions/#required","title":"\u2013 Required value","text":"<p>Some properties are required, which means they must be explicitly set in the <code>values.yaml</code>.</p>"},{"location":"docs/schemas/conventions/#type","title":"\u2013 Type","text":"<p>All properties have a type, for example <code>string</code>, <code>boolean</code>, <code>object</code>, etc.</p>"},{"location":"docs/schemas/conventions/#enum","title":"\u2013 Enumeration","text":"<p>Some properties have a set of allowed values, which are listed in the <code>enum</code> property.</p>"},{"location":"docs/schemas/conventions/#deprecated","title":"\u2013 Deprecated","text":"<p>Some features or properties are deprecated, which means they are no longer recommended for use and may be removed in future versions. It is advised to avoid using deprecated features and to update your configuration to use the recommended alternatives.</p>"},{"location":"docs/schemas/conventions/#min-length","title":"\u2013 Minimum Length","text":"<p>Some properties have a minimum length constraint. This means that the value of the property must be at least the specified length.</p>"},{"location":"docs/schemas/conventions/#max-length","title":"\u2013 Maximum Length","text":"<p>Some properties have a maximum length constraint. This means that the value of the property must not exceed the specified length.</p>"},{"location":"docs/schemas/conventions/#pattern","title":"\u2013 Pattern","text":"<p>Some properties have a pattern constraint. This means that the value of the property must match the specified pattern.</p>"},{"location":"docs/schemas/service/","title":"Cloud Run Service Chart","text":"<p>A Helm chart to template the manifest of a Cloud Run Service.</p> Minimal ServiceService with Direct VPC Connect <pre><code>name: my-service\nimage: ghcr.io/my-org/my-image@sha256:abc123\nregion: us-central1\nenv: \n  MY_ENV_VAR: my-value\nautoscaling: \n  minScale: 0 # scale to zero\n</code></pre> <pre><code>name: my-service\nimage: ghcr.io/my-org/my-image@sha256:abc123\nregion: us-central1\nvpc: \n  network: my-network\n  subnetwork: my-subnetwork\n</code></pre>"},{"location":"docs/schemas/service/#values.global","title":"<code>global</code>","text":"<p>0.1.1 <code>object</code> </p> <p>These values can be set globally and will be used for all subcharts. If you want to set them for a specific subchart, you can do so by setting the values in the subchart itself.</p> <pre><code>global: \n  project: my-project\n  region: us-central1\n</code></pre>"},{"location":"docs/schemas/service/#values.global.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>global:\n  project: my-project\n</code></pre>"},{"location":"docs/schemas/service/#values.global.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>global:\n  region: us-central1\n</code></pre> <pre><code>global:\n  region: europe-west1\n</code></pre> <pre><code>global:\n  region: asia-east1\n</code></pre>"},{"location":"docs/schemas/service/#values.name","title":"<code>name</code>","text":"<p>0.1.1 <code>string</code> 63 <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p> <p>Name of the Cloud Run Service or Job. Must be unique within the project region combination.</p> <pre><code>name: my-cloudrun-container\n</code></pre>"},{"location":"docs/schemas/service/#values.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>project: my-project\n</code></pre>"},{"location":"docs/schemas/service/#values.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>region: us-central1\n</code></pre> <pre><code>region: europe-west1\n</code></pre> <pre><code>region: asia-east1\n</code></pre>"},{"location":"docs/schemas/service/#values.image","title":"<code>image</code>","text":"<p>0.1.1 <code>object</code>, <code>string</code> <code>us-docker.pkg.dev/cloudrun/container/hello</code></p> <p>Container image to deploy. You can provide a direct reference to an image using a <code>string</code> or split up the inputs using the <code>object</code>.</p> Direct image referenceSplit image referenceSplit image reference with tag and registry <pre><code>image: ghcr.io/my-org/my-image@sha256:abc123\n</code></pre> <pre><code>image: \n  repository: ghcr.io/my-project\n  name: my-image\n</code></pre> <pre><code>image: \n  registry: ghcr.io\n  repository: my-project\n  name: my-image\n  tag: 1.0.0\n</code></pre>"},{"location":"docs/schemas/service/#values.image.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image name.</p> <pre><code>image:\n  name: my-image\n</code></pre>"},{"location":"docs/schemas/service/#values.image.registry","title":"<code>registry</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image registry.</p> <pre><code>image:\n  registry: gcr.io\n</code></pre>"},{"location":"docs/schemas/service/#values.image.repository","title":"<code>repository</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image repository.</p> Example 1Example 2 <pre><code>image:\n  repository: gcr.io/my-project\n</code></pre> <pre><code>image:\n  repository: my-project # if used with a registry\n</code></pre>"},{"location":"docs/schemas/service/#values.image.tag","title":"<code>tag</code>","text":"<p>0.1.0 <code>string</code> <code>latest</code></p> <p>Container image tag.</p> Example 1Example 2Example 3 <pre><code>image:\n  tag: latest\n</code></pre> <pre><code>image:\n  tag: @sha256:abc123\n</code></pre> <pre><code>image:\n  tag: 1.0.0\n</code></pre>"},{"location":"docs/schemas/service/#values.revisionName","title":"<code>revisionName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The name of the Cloud Run revision to deploy. If not provided, a random name will be generated. The revision will always be prefixed with the service name.</p> <pre><code>revisionName: my-revision\n</code></pre>"},{"location":"docs/schemas/service/#values.containerName","title":"<code>containerName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>Optional name for the container within a revision. Automatically generated if not supplied.</p> <pre><code>containerName: my-container\n</code></pre>"},{"location":"docs/schemas/service/#values.serviceAccountName","title":"<code>serviceAccountName</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Service account to use to run the CloudRun container. If not provided, the default service account of the project is used.</p> <pre><code>serviceAccountName: my-service-account@my-project.iam.gserviceaccount.com\n</code></pre>"},{"location":"docs/schemas/service/#values.description","title":"<code>description</code>","text":"<p>0.1.1 <code>string</code> </p> <p>A human-readable description of the CloudRun service.</p> <pre><code>description: My service does xyz.\n</code></pre>"},{"location":"docs/schemas/service/#values.env","title":"<code>env</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Environment variables to set in the CloudRun container. Using an object allows merging of multiple values, e.g. <code>env.staging</code> and <code>env.production</code>.</p> <pre><code>env: \n  MY_ENV_VAR: my-value\n</code></pre>"},{"location":"docs/schemas/service/#values.secrets","title":"<code>secrets</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Secrets to map as environment variables in the Cloud Run container.</p> Latest SecretSpecific Secret VersionCross Project Secret with Project NumberCross Project Secret with Project IDMixed Local and Cross Project Secrets <pre><code>secrets: \n  MY_ENV_VAR: my-secret-name\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: my-secret-name\n    version: 2\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: another-secret-name\n    project: 123456789\n    version: 1\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: another-secret-name\n    project: my-project-id\n    version: 1\n</code></pre> <pre><code>secrets: \n  LOCAL_ENV_VAR: my-secret-name\n  CROSS_ENV_VAR: \n    secret: another-secret-name\n    project: my-project-id\n</code></pre>"},{"location":"docs/schemas/service/#values.command","title":"<code>command</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Command that runs when the container starts.</p> <pre><code>command:\n  - echo\n  - Hello, world!\n</code></pre>"},{"location":"docs/schemas/service/#values.args","title":"<code>args</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Arguments to pass to the command.</p> <pre><code>args:\n  - --help\n</code></pre>"},{"location":"docs/schemas/service/#values.resources","title":"<code>resources</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Resource requests and limits for the CloudRun container. If not provided, defaults are used.</p> DefaultReduced Scaling LatencyHigh Memory <pre><code>resources: \n  cpuThrottling: true\n  startupBoost: false\n  limits: \n    cpu: 1\n    memory: 512Mi\n</code></pre> <pre><code>resources: \n  cpuThrottling: false\n  startupBoost: true\n</code></pre> <pre><code>resources: \n  limits: \n    cpu: 4\n    memory: 8Gi\n</code></pre>"},{"location":"docs/schemas/service/#values.resources.cpuThrottling","title":"<code>cpuThrottling</code>","text":"<p>0.1.0 <code>boolean</code> <code>True</code></p> <p>Whether to throttle the CPU. This has significant impact on billing if set to <code>false</code>.</p> <pre><code>resources:\n  cpuThrottling: false\n</code></pre>"},{"location":"docs/schemas/service/#values.resources.gpu","title":"<code>gpu</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable GPU support for the Cloud Run container. Only a single GPU per cloud run container is supported and will incur additional costs.</p> <pre><code>resources:\n  gpu: true\n</code></pre>"},{"location":"docs/schemas/service/#values.resources.limits","title":"<code>limits</code>","text":"<p>0.1.0 <code>object</code> </p>"},{"location":"docs/schemas/service/#values.resources.limits.cpu","title":"<code>cpu</code>","text":"<p>0.1.0 <code>number</code> <code>1</code></p> <p>Maximum CPUs to allocate for the Cloud Run container. Can be 1, 2, 4, 6, 8, or any fractional value from 0.08 to less than 1 in increments of 0.01.</p> <p>The following are minimum memory requirements for CPUs:</p> CPUs Minimum memory 4 2 GiB 6 4 GiB 8 4 GiB <p>If you use less than 1 CPU, the following requirments are enforced:</p> Setting Requirement Memory A minimum of 0.5 CPU is needed to set a memory limit greater than 512MiB.A minimum of 1 CPU is needed to set a memory limit greater than 1GiB. Concurrency Maximum concurrency must be set to 1. CPU allocated CPU allocation must be set to CPU allocated only during request processing. Execution environment You must use the first generation execution environment. MinimumMaximum <pre><code>resources:\n  limits:\n    cpu: 0.08\n</code></pre> <pre><code>resources:\n  limits:\n    cpu: 8\n</code></pre>"},{"location":"docs/schemas/service/#values.resources.limits.memory","title":"<code>memory</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> <code>512Mi</code></p> <p>Maximum memory to allocate for the Cloud Run container. Must be at least 2GiB for 4 CPUs and 4GiB for 6-8 CPUs.</p> Example 1Example 2 <pre><code>resources:\n  limits:\n    memory: 2Gi\n</code></pre> <pre><code>resources:\n  limits:\n    memory: 1024Mi\n</code></pre>"},{"location":"docs/schemas/service/#values.resources.startupBoost","title":"<code>startupBoost</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to boost the CPUs at the start of the container.</p> <pre><code>resources:\n  startupBoost: false\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes","title":"<code>volumes</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Volume configurations for the Cloud Run container. Each key is the volume name and must be a valid k8s name (lowercase alphanumeric with dashes).</p> SecretEmptyDirGCSNFS <pre><code>volumes: \n  config: \n    mountPath: /etc/config\n    secret: \n      name: my-secret\n      items:\n        -\n          version: 1\n          path: config.json\n</code></pre> <pre><code>volumes: \n  cache: \n    mountPath: /cache\n    readOnly: false\n    emptyDir: \n      sizeLimit: 256Mi\n      medium: Memory\n</code></pre> <pre><code>volumes: \n  data: \n    mountPath: /data\n    gcs: \n      bucket: my-data-bucket\n      mountOptions: \n        file-mode: 0644\n        dir-mode: 0755\n</code></pre> <pre><code>volumes: \n  shared: \n    mountPath: /shared\n    nfs: \n      server: 10.0.0.1\n      path: /exports/data\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume","title":"<code>volume</code>","text":"<p>0.1.0 <code>object</code> <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p>"},{"location":"docs/schemas/service/#values.volumes.volume.mountPath","title":"<code>mountPath</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path where the volume should be mounted in the container</p> <pre><code>volumes:\n  volume:\n    mountPath: /data\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume.readOnly","title":"<code>readOnly</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether the volume should be mounted read-only</p> <pre><code>volumes:\n  volume:\n    readOnly: true\n</code></pre> The <code>volumes.volume</code> setting requires exactly one of the following configurations: secretemptyDirgcsnfs"},{"location":"docs/schemas/service/#values.volumes.volume.secret","title":"<code>secret</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount a Secret Manager secret as a volume</p> Latest Secret Version MountMultiple Secret Versions MountCross-Project Secret Mount <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      items:\n        -\n          path: config.json\n</code></pre> <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      items:\n        -\n          version: 1\n          path: old_key.pem\n        -\n          version: 2\n          path: new_key.pem\n</code></pre> <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      project: my-project\n      items:\n        -\n          version: 1\n          path: config.json\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume.secret.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the secret in Secret Manager</p>"},{"location":"docs/schemas/service/#values.volumes.volume.secret.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Project ID for cross-project secrets. If not provided, the project of the Cloud Run service is used.</p>"},{"location":"docs/schemas/service/#values.volumes.volume.secret.items","title":"<code>items</code>","text":"<p>0.1.0 <code>array</code> </p> <p>List of specific secret versions to mount</p>"},{"location":"docs/schemas/service/#values.volumes.volume.emptyDir","title":"<code>emptyDir</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Create an ephemeral in memory volume that exists for the lifetime of the container</p> <pre><code>volumes:\n  volume:\n    emptyDir: \n      size: 256Mi\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume.emptyDir.size","title":"<code>size</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> </p> <p>Maximum size of the volume. Must not exceed the memory limit of the container.</p>"},{"location":"docs/schemas/service/#values.volumes.volume.gcs","title":"<code>gcs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mounts a Google Cloud Storage bucket.</p> GCS BucketBucket with Mount Options <pre><code>volumes:\n  volume:\n    gcs: \n      bucket: my-bucket\n</code></pre> <pre><code>volumes:\n  volume:\n    gcs: \n      bucket: my-bucket\n      mountOptions: \n        file-mode: 0644\n        dir-mode: 0755\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume.gcs.bucket","title":"<code>bucket</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the GCS bucket to mount</p>"},{"location":"docs/schemas/service/#values.volumes.volume.gcs.mountOptions","title":"<code>mountOptions</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Additional mount options for gcsfuse</p>"},{"location":"docs/schemas/service/#values.volumes.volume.nfs","title":"<code>nfs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount an NFS share. The Cloud Run container must be connected via a VPC connector or direct VPC connection to the subnet where the NFS server is located.</p> <pre><code>volumes:\n  volume:\n    nfs: \n      server: 10.0.0.1\n      path: /exports/data\n</code></pre>"},{"location":"docs/schemas/service/#values.volumes.volume.nfs.server","title":"<code>server</code>","text":"<p>0.1.0 <code>string</code> <code>^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$</code> </p> <p>IP address or hostname of the NFS server</p>"},{"location":"docs/schemas/service/#values.volumes.volume.nfs.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path that is exported by the NFS server</p>"},{"location":"docs/schemas/service/#values.network","title":"<code>network</code>","text":"<p>0.1.0 <code>object</code> </p> <p>VPC and networking configuration for the Cloud Run service</p> Direct VPC ConnectionVPC ConnectorCross-Project VPC Access <pre><code>network: \n  vpc: my-vpc\n  subnetwork: my-subnet\n  egress: all-traffic\n</code></pre> <pre><code>network: \n  egress: private-ranges-only\n  connector: my-connector\n</code></pre> <pre><code>network: \n  vpc: projects/other-project/global/networks/my-vpc\n  subnetwork: projects/other-project/regions/us-central1/subnetworks/my-subnet\n  egress: all-traffic\n</code></pre>"},{"location":"docs/schemas/service/#values.network.egress","title":"<code>egress</code>","text":"<p>0.1.0 <code>string</code> <code>private-ranges-only</code> \u00b7 <code>all-traffic</code> <code>private-ranges-only</code></p> <p>The egress type to use for the Cloud Run container if connected to a VPC. In general, use <code>private-ranges-only</code> to reduce latency and bottlenecks when calling external services. Can only be set when <code>connector</code> or <code>vpc</code> and <code>subnetwork</code> are set.</p> <pre><code>network:\n  egress: all-traffic\n</code></pre> The <code>network</code> setting requires exactly one of the following configurations: connectorvpc"},{"location":"docs/schemas/service/#values.network.connector","title":"<code>connector</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/locations/[^/]+/connectors/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC connector to use for the CloudRun container. Uses a serverless VPC access connector. Cannot be used with network.</p> Example 1Example 2 <pre><code>network:\n  connector: projects/my-project/locations/us-central1/connectors/my-connector\n</code></pre> <pre><code>network:\n  connector: my-connector\n</code></pre>"},{"location":"docs/schemas/service/#values.network.vpc","title":"<code>vpc</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/global/networks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC network to use to create a direct VPC connection. Must be used with subnetwork. Cannot be used with connector.</p> Example 1Example 2 <pre><code>network:\n  vpc: projects/my-project/global/networks/my-vpc\n</code></pre> <pre><code>network:\n  vpc: my-vpc\n</code></pre>"},{"location":"docs/schemas/service/#values.network.subnetwork","title":"<code>subnetwork</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/regions/[^/]+/subnetworks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC subnetwork to use to create a direct VPC connection. Must be used with vpc. Cannot be used with connector.</p> Example 1Example 2 <pre><code>network:\n  subnetwork: projects/my-project/regions/us-central1/subnetworks/my-subnet\n</code></pre> <pre><code>network:\n  subnetwork: my-subnet\n</code></pre>"},{"location":"docs/schemas/service/#values.network.tags","title":"<code>tags</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Tags to apply to the network interfaces created for the Cloud Run container. Use the network tags feature of VPC access connectors to control traffic to and from the service.</p> <pre><code>network:\n  tags:\n    - tag1\n    - tag2\n</code></pre>"},{"location":"docs/schemas/service/#values.cloudsql","title":"<code>cloudsql</code>","text":"<p>0.1.0 <code>object</code> </p> <p>CloudSQL configuration for the Cloud Run service. If not provided, the service will not be connected to any CloudSQL instances.</p> <p>Info</p> <p>Defining this will automatically inject a <code>CLOUD_SQL_CONNECTION</code> environment variable with the format <code>/cloudsql/project:region:instance</code>. Some libraries will automatically append the required <code>/.s.PGSQL.5432</code> suffix to connect to the correct unix socket, while others do not. The environment variable is provided without the socket suffix.</p> Direct CloudSQL Connection in same regionDirect CloudSQL Connection in different region <pre><code>cloudsql: \n  instance: my-instance\n  project: my-project\n</code></pre> <pre><code>cloudsql: \n  instance: my-instance\n  project: my-project\n  region: europe-west1\n</code></pre>"},{"location":"docs/schemas/service/#values.cloudsql.instance","title":"<code>instance</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL instance name.</p> <pre><code>cloudsql:\n  instance: my-instance\n</code></pre>"},{"location":"docs/schemas/service/#values.cloudsql.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL project name.</p> <pre><code>cloudsql:\n  project: my-project\n</code></pre>"},{"location":"docs/schemas/service/#values.cloudsql.region","title":"<code>region</code>","text":"<p>0.1.0 <code>string</code> <code>.region</code></p> <p>CloudSQL region. Defaults to the region of the Cloud Run service.</p> <pre><code>cloudsql:\n  region: us-central1\n</code></pre>"},{"location":"docs/schemas/service/#values.executionEnvironment","title":"<code>executionEnvironment</code>","text":"<p>0.1.0 <code>string</code> <code>gen2</code> \u00b7 <code>gen1</code> <code>gen2</code></p> <p>The execution environment to use for the Cloud Run container.</p> <pre><code>executionEnvironment: gen1\n</code></pre>"},{"location":"docs/schemas/service/#values.launchStage","title":"<code>launchStage</code>","text":"<p>0.1.0 <code>string</code> <code>ALPHA</code> \u00b7 <code>BETA</code> \u00b7 <code>GA</code> <code>BETA</code></p> <p>The launch stage of the Cloud Run service. Controls feature availability.</p> <pre><code>launchStage: GA\n</code></pre>"},{"location":"docs/schemas/service/#values.autoscaling","title":"<code>autoscaling</code>","text":"<p>0.1.1 <code>object</code> </p> DefaultScale to zero <pre><code>autoscaling: \n  minScale: 1\n  maxScale: 100\n  maxConcurrentRequests: 80\n  timeoutSeconds: 60\n</code></pre> <pre><code>autoscaling: \n  minScale: 0\n  maxScale: 100\n  maxConcurrentRequests: 80\n  timeoutSeconds: 120\n</code></pre>"},{"location":"docs/schemas/service/#values.autoscaling.minScale","title":"<code>minScale</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Minimum number of replicas to scale down to. 0 enables scale to zero.</p> DefaultScale to zero <pre><code>autoscaling:\n  minScale: 1\n</code></pre> <pre><code>autoscaling:\n  minScale: 0\n</code></pre>"},{"location":"docs/schemas/service/#values.autoscaling.maxScale","title":"<code>maxScale</code>","text":"<p>0.1.0 <code>integer</code> <code>100</code></p> <p>Maximum number of replicas to scale up to.</p> <pre><code>autoscaling:\n  maxScale: 1\n</code></pre>"},{"location":"docs/schemas/service/#values.autoscaling.maxConcurrentRequests","title":"<code>maxConcurrentRequests</code>","text":"<p>0.1.0 <code>integer</code> <code>80</code></p> <p>The number of concurrent requests per instance. Controls how many requests are processed before the autoscaler scales up. Setting this to 1 means 1 request per instance at a time.</p> <pre><code>autoscaling:\n  maxConcurrentRequests: 1\n</code></pre>"},{"location":"docs/schemas/service/#values.autoscaling.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>300</code></p> <p>The maximum time the container will wait before responding with a 504 error. Especially important for startup times of newly spawned containers.</p> <pre><code>autoscaling:\n  timeoutSeconds: 120\n</code></pre>"},{"location":"docs/schemas/service/#values.sessionAffinity","title":"<code>sessionAffinity</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable session affinity for the CloudRun service. When enabled, requests from the same client are routed to the same container instance.</p> <pre><code>sessionAffinity: true\n</code></pre>"},{"location":"docs/schemas/service/#values.containerPort","title":"<code>containerPort</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Container port to expose. In CloudRun only a single port can be exposed and defaults to 8080.</p> <pre><code>containerPort: 8081\n</code></pre>"},{"location":"docs/schemas/service/#values.http2","title":"<code>http2</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to use HTTP/2 for the container port. If enabled, the port name will be h2c instead of http1.</p> <pre><code>http2: true\n</code></pre>"},{"location":"docs/schemas/service/#values.ingress","title":"<code>ingress</code>","text":"<p>0.1.0 <code>string</code> <code>all</code> \u00b7 <code>internal</code> \u00b7 <code>internal-and-cloud-load-balancing</code> <code>all</code></p> <p>The ingress settings for the CloudRun service. Controls where the service can be accessed from.</p> <pre><code>ingress: internal\n</code></pre>"},{"location":"docs/schemas/service/#values.startupProbe","title":"<code>startupProbe</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The startup probe controls how the Cloud Run service is monitored for readiness. And new revisions will only replace the running container if the startup probe succeeds.</p> HTTPTCPgRPC <pre><code>startupProbe: \n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  failureThreshold: 3\n  httpGet: \n    path: /health\n    port: 8080\n    httpHeaders:\n      -\n        name: X-Custom-Header\n        value: my-value\n</code></pre> <pre><code>startupProbe: \n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  failureThreshold: 3\n  tcpSocket: \n    port: 8080\n</code></pre> <pre><code>startupProbe: \n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  failureThreshold: 3\n  grpc: \n    port: 8080\n</code></pre>"},{"location":"docs/schemas/service/#values.startupProbe.initialDelaySeconds","title":"<code>initialDelaySeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>0</code></p> <p>Number of seconds after the container starts before the probe is initiated</p>"},{"location":"docs/schemas/service/#values.startupProbe.periodSeconds","title":"<code>periodSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>10</code></p> <p>How often (in seconds) to perform the probe</p>"},{"location":"docs/schemas/service/#values.startupProbe.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Number of seconds after which the probe times out</p>"},{"location":"docs/schemas/service/#values.startupProbe.failureThreshold","title":"<code>failureThreshold</code>","text":"<p>0.1.0 <code>integer</code> <code>3</code></p> <p>Number of consecutive failures required to determine the container is not alive</p> The <code>startupProbe</code> setting requires exactly one of the following configurations: httpGettcpSocketgrpc"},{"location":"docs/schemas/service/#values.startupProbe.httpGet","title":"<code>httpGet</code>","text":"<p>0.1.0 <code>object</code> </p> <p>HTTP health check configuration. If you are configuring your Cloud Run service for HTTP probes, you must also add an endpoint in your service code to respond to the probe. Any response between 200 and 400 is a success, everything else indicates failure.</p> <pre><code>startupProbe:\n  httpGet: \n    path: /health\n    port: 8080\n    httpHeaders:\n      -\n        name: X-Custom-Header\n        value: my-value\n</code></pre>"},{"location":"docs/schemas/service/#values.startupProbe.httpGet.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Relative path to the HTTP endpoint, for example, /heatlh.</p>"},{"location":"docs/schemas/service/#values.startupProbe.httpGet.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Port to probe for HTTP health check. Should be set to the container port used for your service.</p>"},{"location":"docs/schemas/service/#values.startupProbe.httpGet.httpHeaders","title":"<code>httpHeaders</code>","text":"<p>0.1.0 <code>array</code> </p> <p>HTTP headers can be used to supply multiple or repeated custom headers.</p>"},{"location":"docs/schemas/service/#values.startupProbe.tcpSocket","title":"<code>tcpSocket</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Probes if the container is listening on the specified port. Use the other health check options for more control.</p> <pre><code>startupProbe:\n  tcpSocket: \n    port: 8080\n</code></pre>"},{"location":"docs/schemas/service/#values.startupProbe.tcpSocket.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port should be set to the container port used for your service.</p>"},{"location":"docs/schemas/service/#values.startupProbe.grpc","title":"<code>grpc</code>","text":"<p>0.1.0 <code>object</code> </p> <p>If you are configuring a gRPC probe, you must also implement the gRPC Health Checking protocol in your Cloud Run service.</p> <pre><code>startupProbe:\n  grpc: \n    port: 8080\n    service: my-service\n</code></pre>"},{"location":"docs/schemas/service/#values.startupProbe.grpc.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port to probe for gRPC health check. Should be set to the container port used for your service.</p>"},{"location":"docs/schemas/service/#values.startupProbe.grpc.service","title":"<code>service</code>","text":"<p>0.1.0 <code>string</code> </p> <p>If set, this is used in the service field of the <code>grpc.health.v1.HealthCheckRequest</code> when the <code>grpc.health.v1.Health.Check</code> rpc is called.</p>"},{"location":"docs/schemas/service/#values.livenessProbe","title":"<code>livenessProbe</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The liveness probe controls how the Cloud Run service is monitored for health. If a liveness probe does not succeed within the specified time (failureThreshold * periodSeconds), the container is shut down using a SIGKILL signal. Any remaining requests that were still being served by the container are terminated with the HTTP status code 503. After the container is shut down, Cloud Run autoscaling starts up a new container instance.</p> HTTPgRPC <pre><code>livenessProbe: \n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  failureThreshold: 3\n  httpGet: \n    path: /health\n    port: 8080\n</code></pre> <pre><code>livenessProbe: \n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  failureThreshold: 3\n  grpc: \n    port: 8080\n</code></pre>"},{"location":"docs/schemas/service/#values.livenessProbe.initialDelaySeconds","title":"<code>initialDelaySeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>0</code></p> <p>Number of seconds after the container starts before the probe is initiated</p>"},{"location":"docs/schemas/service/#values.livenessProbe.periodSeconds","title":"<code>periodSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>10</code></p> <p>How often (in seconds) to perform the probe</p>"},{"location":"docs/schemas/service/#values.livenessProbe.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.0 <code>integer</code> <code>1</code></p> <p>Number of seconds after which the probe times out</p>"},{"location":"docs/schemas/service/#values.livenessProbe.failureThreshold","title":"<code>failureThreshold</code>","text":"<p>0.1.0 <code>integer</code> <code>3</code></p> <p>Number of consecutive failures required to determine the container is not alive</p> The <code>livenessProbe</code> setting requires exactly one of the following configurations: httpGetgrpc"},{"location":"docs/schemas/service/#values.livenessProbe.httpGet","title":"<code>httpGet</code>","text":"<p>0.1.0 <code>object</code> </p> <p>HTTP health check configuration. If you are configuring your Cloud Run service for HTTP probes, you must also add an endpoint in your service code to respond to the probe. Any response between 200 and 400 is a success, everything else indicates failure.</p> <pre><code>livenessProbe:\n  httpGet: \n    path: /health\n    port: 8080\n    httpHeaders:\n      -\n        name: X-Custom-Header\n        value: my-value\n</code></pre>"},{"location":"docs/schemas/service/#values.livenessProbe.httpGet.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Relative path to the HTTP endpoint, for example, /heatlh.</p>"},{"location":"docs/schemas/service/#values.livenessProbe.httpGet.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code></p> <p>Port to probe for HTTP health check. Should be set to the container port used for your service.</p>"},{"location":"docs/schemas/service/#values.livenessProbe.httpGet.httpHeaders","title":"<code>httpHeaders</code>","text":"<p>0.1.0 <code>array</code> </p> <p>HTTP headers can be used to supply multiple or repeated custom headers.</p>"},{"location":"docs/schemas/service/#values.livenessProbe.grpc","title":"<code>grpc</code>","text":"<p>0.1.0 <code>object</code> </p> <p>If you are configuring a gRPC probe, you must also implement the gRPC Health Checking protocol in your Cloud Run service.</p> <pre><code>livenessProbe:\n  grpc: \n    port: 8080\n    service: my-service\n</code></pre>"},{"location":"docs/schemas/service/#values.livenessProbe.grpc.port","title":"<code>port</code>","text":"<p>0.1.0 <code>integer</code> <code>8080</code> </p> <p>Port to probe for gRPC health check. Should be set to the container port used for your service.</p>"},{"location":"docs/schemas/service/#values.livenessProbe.grpc.service","title":"<code>service</code>","text":"<p>0.1.0 <code>string</code> </p> <p>If set, this is used in the service field of the <code>grpc.health.v1.HealthCheckRequest</code> when the <code>grpc.health.v1.Health.Check</code> rpc is called.</p>"},{"location":"docs/schemas/service/#values.disableInvokerIamPolicy","title":"<code>disableInvokerIamPolicy</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to disable the invoker IAM policy for the Cloud Run service. This is useful when using a VPC connector or direct VPC connection to avoid conflicts with the invoker IAM policy. Must be first requested via invite and is not generally available.</p>"},{"location":"docs/schemas/service/#values.customAudiences","title":"<code>customAudiences</code>","text":"<p>0.1.0 <code>array</code> </p> <p>Custom audiences to set in the generated ID token when using Identity Platform.</p> <pre><code>customAudiences:\n  - https://example.com\n  - my-audience\n</code></pre>"},{"location":"docs/schemas/service/#values.binaryAuthorization","title":"<code>binaryAuthorization</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enforce Binary Authorization policy for this service.</p> <pre><code>binaryAuthorization: true\n</code></pre>"},{"location":"docs/schemas/service/#values.encryption","title":"<code>encryption</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The KMS key to use for encrypting this service. Must be located in the same region and project as the Cloud Run service.</p> <pre><code>encryption: \n  key: my-key\n  keyring: my-keyring\n</code></pre>"},{"location":"docs/schemas/service/#values.encryption.key","title":"<code>key</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS key to use for encrypting this service.</p>"},{"location":"docs/schemas/service/#values.encryption.keyring","title":"<code>keyring</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS keyring where the key is stored.</p>"},{"location":"docs/schemas/service/CHANGELOG/","title":"Changelog","text":""},{"location":"docs/schemas/service/CHANGELOG/#1.0.0","title":"1.0.0(https://github.com/helmless/google-cloudrun-charts/compare/google-cloudrun-service-v0.2.1...google-cloudrun-service-v1.0.0) (2025-03-27)","text":""},{"location":"docs/schemas/service/CHANGELOG/#features","title":"Features","text":"<ul> <li>add globals for project and region (#5) (f3c3230)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>deps: update common chart dependency (aee27ae)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>release 1.0.0 (9d28835)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#0.2.1","title":"0.2.1(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.2.0...google-cloudrun-service-v0.2.1) (2025-03-21)","text":""},{"location":"docs/schemas/service/CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>trigger release and set new icon (81d71db)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#0.2.0","title":"0.2.0(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.1.1...google-cloudrun-service-v0.2.0) (2025-03-20)","text":""},{"location":"docs/schemas/service/CHANGELOG/#features_1","title":"Features","text":"<ul> <li>extract common helm chart and schema (d8e1d69)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>derefenrence schema before commit (637b754)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#0.1.1","title":"0.1.1(https://github.com/helmless/helmless/compare/google-cloudrun-service-v0.1.0...google-cloudrun-service-v0.1.1) (2025-03-07)","text":""},{"location":"docs/schemas/service/CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>add explicit global settings to the schema (1dec277)</li> <li>cloudrun-service: allow additional properties, e.g. global (ae5b74d)</li> <li>test: exclude volatile version from snapshot test (d46096c)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#0.1.0","title":"0.1.0 (2024-12-04)","text":""},{"location":"docs/schemas/service/CHANGELOG/#features_2","title":"Features","text":"<ul> <li>cloudrun service chart (#6) (38836de)</li> <li>docs: add support for enums in schema (07d12d8)</li> <li>finish docs refactor and add chart schema renderer (1ebea3b)</li> <li>move google cloud run helm chart back into monorepo (74cc7a1)</li> <li>schema: add really nice schema rendering and examples (cad3df6)</li> <li>schema: extend cloud run service schema (99268c2)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>cloudrun-service: do not autoset region, let the cli do it (770fd3c)</li> <li>docs: update the changelog heading regex (64976d8)</li> <li>release: set correct component name (992f319)</li> <li>release: update snapshots in release pr (f2ebcff)</li> <li>render nested props correctly (3794a01)</li> <li>schema: cleanup chart values file and schema (808585e)</li> <li>schema: move properties under correct key (111da47)</li> <li>schema: update renderer to correctly indent nested props (a6d1f58)</li> </ul>"},{"location":"docs/schemas/service/CHANGELOG/#miscellaneous-chores_1","title":"Miscellaneous Chores","text":"<ul> <li>release 0.1.0 (f455943)</li> </ul>"},{"location":"docs/schemas/job/","title":"Cloud Run Job Chart","text":"<p>A Helm chart to template the manifest of a Cloud Run Job.</p> Minimal JobJob with Direct VPC Connect <pre><code>name: my-job\nimage: ghcr.io/my-org/my-image@sha256:abc123\nregion: us-central1\nenv: \n  MY_ENV_VAR: my-value\n</code></pre> <pre><code>name: my-job\nimage: ghcr.io/my-org/my-image@sha256:abc123\nregion: us-central1\nvpc: \n  network: my-network\n  subnetwork: my-subnetwork\n</code></pre>"},{"location":"docs/schemas/job/#values.global","title":"<code>global</code>","text":"<p>0.1.1 <code>object</code> </p> <p>These values can be set globally and will be used for all subcharts. If you want to set them for a specific subchart, you can do so by setting the values in the subchart itself.</p> <pre><code>global: \n  project: my-project\n  region: us-central1\n</code></pre>"},{"location":"docs/schemas/job/#values.global.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>global:\n  project: my-project\n</code></pre>"},{"location":"docs/schemas/job/#values.global.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>global:\n  region: us-central1\n</code></pre> <pre><code>global:\n  region: europe-west1\n</code></pre> <pre><code>global:\n  region: asia-east1\n</code></pre>"},{"location":"docs/schemas/job/#values.name","title":"<code>name</code>","text":"<p>0.1.1 <code>string</code> 63 <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p> <p>Name of the Cloud Run Service or Job. Must be unique within the project region combination.</p> <pre><code>name: my-cloudrun-container\n</code></pre>"},{"location":"docs/schemas/job/#values.project","title":"<code>project</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The Google cloud project to deploy the Cloud Run Service or Job to.</p> <pre><code>project: my-project\n</code></pre>"},{"location":"docs/schemas/job/#values.region","title":"<code>region</code>","text":"<p>0.1.1 <code>string</code> <code>^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$</code> <code>us-central1</code></p> <p>The region to deploy the CloudRun service to. Uses the default region if not provided.</p> Example 1Example 2Example 3 <pre><code>region: us-central1\n</code></pre> <pre><code>region: europe-west1\n</code></pre> <pre><code>region: asia-east1\n</code></pre>"},{"location":"docs/schemas/job/#values.image","title":"<code>image</code>","text":"<p>0.1.1 <code>object</code>, <code>string</code> <code>us-docker.pkg.dev/cloudrun/container/hello</code></p> <p>Container image to deploy. You can provide a direct reference to an image using a <code>string</code> or split up the inputs using the <code>object</code>.</p> Direct image referenceSplit image referenceSplit image reference with tag and registry <pre><code>image: ghcr.io/my-org/my-image@sha256:abc123\n</code></pre> <pre><code>image: \n  repository: ghcr.io/my-project\n  name: my-image\n</code></pre> <pre><code>image: \n  registry: ghcr.io\n  repository: my-project\n  name: my-image\n  tag: 1.0.0\n</code></pre>"},{"location":"docs/schemas/job/#values.image.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image name.</p> <pre><code>image:\n  name: my-image\n</code></pre>"},{"location":"docs/schemas/job/#values.image.registry","title":"<code>registry</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image registry.</p> <pre><code>image:\n  registry: gcr.io\n</code></pre>"},{"location":"docs/schemas/job/#values.image.repository","title":"<code>repository</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Container image repository.</p> Example 1Example 2 <pre><code>image:\n  repository: gcr.io/my-project\n</code></pre> <pre><code>image:\n  repository: my-project # if used with a registry\n</code></pre>"},{"location":"docs/schemas/job/#values.image.tag","title":"<code>tag</code>","text":"<p>0.1.0 <code>string</code> <code>latest</code></p> <p>Container image tag.</p> Example 1Example 2Example 3 <pre><code>image:\n  tag: latest\n</code></pre> <pre><code>image:\n  tag: @sha256:abc123\n</code></pre> <pre><code>image:\n  tag: 1.0.0\n</code></pre>"},{"location":"docs/schemas/job/#values.revisionName","title":"<code>revisionName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>The name of the Cloud Run revision to deploy. If not provided, a random name will be generated. The revision will always be prefixed with the service name.</p> <pre><code>revisionName: my-revision\n</code></pre>"},{"location":"docs/schemas/job/#values.containerName","title":"<code>containerName</code>","text":"<p>0.1.1 <code>string</code> </p> <p>Optional name for the container within a revision. Automatically generated if not supplied.</p> <pre><code>containerName: my-container\n</code></pre>"},{"location":"docs/schemas/job/#values.serviceAccountName","title":"<code>serviceAccountName</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Service account to use to run the CloudRun container. If not provided, the default service account of the project is used.</p> <pre><code>serviceAccountName: my-service-account@my-project.iam.gserviceaccount.com\n</code></pre>"},{"location":"docs/schemas/job/#values.description","title":"<code>description</code>","text":"<p>0.1.1 <code>string</code> </p> <p>A human-readable description of the CloudRun service.</p> <pre><code>description: My service does xyz.\n</code></pre>"},{"location":"docs/schemas/job/#values.env","title":"<code>env</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Environment variables to set in the CloudRun container. Using an object allows merging of multiple values, e.g. <code>env.staging</code> and <code>env.production</code>.</p> <pre><code>env: \n  MY_ENV_VAR: my-value\n</code></pre>"},{"location":"docs/schemas/job/#values.secrets","title":"<code>secrets</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Secrets to map as environment variables in the Cloud Run container.</p> Latest SecretSpecific Secret VersionCross Project Secret with Project NumberCross Project Secret with Project IDMixed Local and Cross Project Secrets <pre><code>secrets: \n  MY_ENV_VAR: my-secret-name\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: my-secret-name\n    version: 2\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: another-secret-name\n    project: 123456789\n    version: 1\n</code></pre> <pre><code>secrets: \n  MY_ENV_VAR: \n    secret: another-secret-name\n    project: my-project-id\n    version: 1\n</code></pre> <pre><code>secrets: \n  LOCAL_ENV_VAR: my-secret-name\n  CROSS_ENV_VAR: \n    secret: another-secret-name\n    project: my-project-id\n</code></pre>"},{"location":"docs/schemas/job/#values.command","title":"<code>command</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Command that runs when the container starts.</p> <pre><code>command:\n  - echo\n  - Hello, world!\n</code></pre>"},{"location":"docs/schemas/job/#values.args","title":"<code>args</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Arguments to pass to the command.</p> <pre><code>args:\n  - --help\n</code></pre>"},{"location":"docs/schemas/job/#values.parallelism","title":"<code>parallelism</code>","text":"<p>0.1.1 <code>integer</code> <code>0</code></p> <p>The number of instances of the job to run in parallel. The maximum number of instances is limited by the CPU and project quotas. It also highly depends on the consumed resources, e.g. database connections, etc.</p> <pre><code>parallelism: 1\n</code></pre>"},{"location":"docs/schemas/job/#values.taskCount","title":"<code>taskCount</code>","text":"<p>0.1.1 <code>integer</code> <code>1</code></p> <p>Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.</p> <pre><code>taskCount: 10\n</code></pre>"},{"location":"docs/schemas/job/#values.timeoutSeconds","title":"<code>timeoutSeconds</code>","text":"<p>0.1.1 <code>integer</code> <code>600</code></p> <p>The maximum duration in seconds to allow the job to run. If the job is still running after this time, it will be terminated.</p> <pre><code>timeoutSeconds: 3600\n</code></pre>"},{"location":"docs/schemas/job/#values.maxRetries","title":"<code>maxRetries</code>","text":"<p>0.1.1 <code>integer</code> <code>3</code></p> <p>The maximum number of retries for the job. If the job fails, it will be retried up to this number of times.</p> <pre><code>maxRetries: 0\n</code></pre>"},{"location":"docs/schemas/job/#values.resources","title":"<code>resources</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Resource requests and limits for the CloudRun container. If not provided, defaults are used.</p> DefaultReduced Scaling LatencyHigh Memory <pre><code>resources: \n  cpuThrottling: true\n  startupBoost: false\n  limits: \n    cpu: 1\n    memory: 512Mi\n</code></pre> <pre><code>resources: \n  cpuThrottling: false\n  startupBoost: true\n</code></pre> <pre><code>resources: \n  limits: \n    cpu: 4\n    memory: 8Gi\n</code></pre>"},{"location":"docs/schemas/job/#values.resources.cpuThrottling","title":"<code>cpuThrottling</code>","text":"<p>0.1.0 <code>boolean</code> <code>True</code></p> <p>Whether to throttle the CPU. This has significant impact on billing if set to <code>false</code>.</p> <pre><code>resources:\n  cpuThrottling: false\n</code></pre>"},{"location":"docs/schemas/job/#values.resources.gpu","title":"<code>gpu</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enable GPU support for the Cloud Run container. Only a single GPU per cloud run container is supported and will incur additional costs.</p> <pre><code>resources:\n  gpu: true\n</code></pre>"},{"location":"docs/schemas/job/#values.resources.limits","title":"<code>limits</code>","text":"<p>0.1.0 <code>object</code> </p>"},{"location":"docs/schemas/job/#values.resources.limits.cpu","title":"<code>cpu</code>","text":"<p>0.1.0 <code>number</code> <code>1</code></p> <p>Maximum CPUs to allocate for the Cloud Run container. Can be 1, 2, 4, 6, 8, or any fractional value from 0.08 to less than 1 in increments of 0.01.</p> <p>The following are minimum memory requirements for CPUs:</p> CPUs Minimum memory 4 2 GiB 6 4 GiB 8 4 GiB <p>If you use less than 1 CPU, the following requirments are enforced:</p> Setting Requirement Memory A minimum of 0.5 CPU is needed to set a memory limit greater than 512MiB.A minimum of 1 CPU is needed to set a memory limit greater than 1GiB. Concurrency Maximum concurrency must be set to 1. CPU allocated CPU allocation must be set to CPU allocated only during request processing. Execution environment You must use the first generation execution environment. MinimumMaximum <pre><code>resources:\n  limits:\n    cpu: 0.08\n</code></pre> <pre><code>resources:\n  limits:\n    cpu: 8\n</code></pre>"},{"location":"docs/schemas/job/#values.resources.limits.memory","title":"<code>memory</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> <code>512Mi</code></p> <p>Maximum memory to allocate for the Cloud Run container. Must be at least 2GiB for 4 CPUs and 4GiB for 6-8 CPUs.</p> Example 1Example 2 <pre><code>resources:\n  limits:\n    memory: 2Gi\n</code></pre> <pre><code>resources:\n  limits:\n    memory: 1024Mi\n</code></pre>"},{"location":"docs/schemas/job/#values.resources.startupBoost","title":"<code>startupBoost</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to boost the CPUs at the start of the container.</p> <pre><code>resources:\n  startupBoost: false\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes","title":"<code>volumes</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Volume configurations for the Cloud Run container. Each key is the volume name and must be a valid k8s name (lowercase alphanumeric with dashes).</p> SecretEmptyDirGCSNFS <pre><code>volumes: \n  config: \n    mountPath: /etc/config\n    secret: \n      name: my-secret\n      items:\n        -\n          version: 1\n          path: config.json\n</code></pre> <pre><code>volumes: \n  cache: \n    mountPath: /cache\n    readOnly: false\n    emptyDir: \n      sizeLimit: 256Mi\n      medium: Memory\n</code></pre> <pre><code>volumes: \n  data: \n    mountPath: /data\n    gcs: \n      bucket: my-data-bucket\n      mountOptions: \n        file-mode: 0644\n        dir-mode: 0755\n</code></pre> <pre><code>volumes: \n  shared: \n    mountPath: /shared\n    nfs: \n      server: 10.0.0.1\n      path: /exports/data\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume","title":"<code>volume</code>","text":"<p>0.1.0 <code>object</code> <code>^[a-z0-9]([-a-z0-9]*[a-z0-9])?$</code> </p>"},{"location":"docs/schemas/job/#values.volumes.volume.mountPath","title":"<code>mountPath</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path where the volume should be mounted in the container</p> <pre><code>volumes:\n  volume:\n    mountPath: /data\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume.readOnly","title":"<code>readOnly</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether the volume should be mounted read-only</p> <pre><code>volumes:\n  volume:\n    readOnly: true\n</code></pre> The <code>volumes.volume</code> setting requires exactly one of the following configurations: secretemptyDirgcsnfs"},{"location":"docs/schemas/job/#values.volumes.volume.secret","title":"<code>secret</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount a Secret Manager secret as a volume</p> Latest Secret Version MountMultiple Secret Versions MountCross-Project Secret Mount <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      items:\n        -\n          path: config.json\n</code></pre> <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      items:\n        -\n          version: 1\n          path: old_key.pem\n        -\n          version: 2\n          path: new_key.pem\n</code></pre> <pre><code>volumes:\n  volume:\n    secret: \n      name: my-secret\n      project: my-project\n      items:\n        -\n          version: 1\n          path: config.json\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume.secret.name","title":"<code>name</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the secret in Secret Manager</p>"},{"location":"docs/schemas/job/#values.volumes.volume.secret.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Project ID for cross-project secrets. If not provided, the project of the Cloud Run service is used.</p>"},{"location":"docs/schemas/job/#values.volumes.volume.secret.items","title":"<code>items</code>","text":"<p>0.1.0 <code>array</code> </p> <p>List of specific secret versions to mount</p>"},{"location":"docs/schemas/job/#values.volumes.volume.emptyDir","title":"<code>emptyDir</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Create an ephemeral in memory volume that exists for the lifetime of the container</p> <pre><code>volumes:\n  volume:\n    emptyDir: \n      size: 256Mi\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume.emptyDir.size","title":"<code>size</code>","text":"<p>0.1.0 <code>string</code> <code>^\\d+(\\.\\d+)?(Mi|Gi)$</code> </p> <p>Maximum size of the volume. Must not exceed the memory limit of the container.</p>"},{"location":"docs/schemas/job/#values.volumes.volume.gcs","title":"<code>gcs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mounts a Google Cloud Storage bucket.</p> GCS BucketBucket with Mount Options <pre><code>volumes:\n  volume:\n    gcs: \n      bucket: my-bucket\n</code></pre> <pre><code>volumes:\n  volume:\n    gcs: \n      bucket: my-bucket\n      mountOptions: \n        file-mode: 0644\n        dir-mode: 0755\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume.gcs.bucket","title":"<code>bucket</code>","text":"<p>0.1.0 <code>string</code> </p> <p>Name of the GCS bucket to mount</p>"},{"location":"docs/schemas/job/#values.volumes.volume.gcs.mountOptions","title":"<code>mountOptions</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Additional mount options for gcsfuse</p>"},{"location":"docs/schemas/job/#values.volumes.volume.nfs","title":"<code>nfs</code>","text":"<p>0.1.0 <code>object</code> </p> <p>Mount an NFS share. The Cloud Run container must be connected via a VPC connector or direct VPC connection to the subnet where the NFS server is located.</p> <pre><code>volumes:\n  volume:\n    nfs: \n      server: 10.0.0.1\n      path: /exports/data\n</code></pre>"},{"location":"docs/schemas/job/#values.volumes.volume.nfs.server","title":"<code>server</code>","text":"<p>0.1.0 <code>string</code> <code>^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$</code> </p> <p>IP address or hostname of the NFS server</p>"},{"location":"docs/schemas/job/#values.volumes.volume.nfs.path","title":"<code>path</code>","text":"<p>0.1.0 <code>string</code> <code>^/.*</code> </p> <p>Path that is exported by the NFS server</p>"},{"location":"docs/schemas/job/#values.network","title":"<code>network</code>","text":"<p>0.1.0 <code>object</code> </p> <p>VPC and networking configuration for the Cloud Run service</p> Direct VPC ConnectionVPC ConnectorCross-Project VPC Access <pre><code>network: \n  vpc: my-vpc\n  subnetwork: my-subnet\n  egress: all-traffic\n</code></pre> <pre><code>network: \n  egress: private-ranges-only\n  connector: my-connector\n</code></pre> <pre><code>network: \n  vpc: projects/other-project/global/networks/my-vpc\n  subnetwork: projects/other-project/regions/us-central1/subnetworks/my-subnet\n  egress: all-traffic\n</code></pre>"},{"location":"docs/schemas/job/#values.network.egress","title":"<code>egress</code>","text":"<p>0.1.0 <code>string</code> <code>private-ranges-only</code> \u00b7 <code>all-traffic</code> <code>private-ranges-only</code></p> <p>The egress type to use for the Cloud Run container if connected to a VPC. In general, use <code>private-ranges-only</code> to reduce latency and bottlenecks when calling external services. Can only be set when <code>connector</code> or <code>vpc</code> and <code>subnetwork</code> are set.</p> <pre><code>network:\n  egress: all-traffic\n</code></pre> The <code>network</code> setting requires exactly one of the following configurations: connectorvpc"},{"location":"docs/schemas/job/#values.network.connector","title":"<code>connector</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/locations/[^/]+/connectors/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC connector to use for the CloudRun container. Uses a serverless VPC access connector. Cannot be used with network.</p> Example 1Example 2 <pre><code>network:\n  connector: projects/my-project/locations/us-central1/connectors/my-connector\n</code></pre> <pre><code>network:\n  connector: my-connector\n</code></pre>"},{"location":"docs/schemas/job/#values.network.vpc","title":"<code>vpc</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/global/networks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC network to use to create a direct VPC connection. Must be used with subnetwork. Cannot be used with connector.</p> Example 1Example 2 <pre><code>network:\n  vpc: projects/my-project/global/networks/my-vpc\n</code></pre> <pre><code>network:\n  vpc: my-vpc\n</code></pre>"},{"location":"docs/schemas/job/#values.network.subnetwork","title":"<code>subnetwork</code>","text":"<p>0.1.0 <code>string</code> <code>^(projects/[^/]+/regions/[^/]+/subnetworks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$</code> </p> <p>Name of the VPC subnetwork to use to create a direct VPC connection. Must be used with vpc. Cannot be used with connector.</p> Example 1Example 2 <pre><code>network:\n  subnetwork: projects/my-project/regions/us-central1/subnetworks/my-subnet\n</code></pre> <pre><code>network:\n  subnetwork: my-subnet\n</code></pre>"},{"location":"docs/schemas/job/#values.network.tags","title":"<code>tags</code>","text":"<p>0.1.0 <code>array</code> <code>[]</code></p> <p>Tags to apply to the network interfaces created for the Cloud Run container. Use the network tags feature of VPC access connectors to control traffic to and from the service.</p> <pre><code>network:\n  tags:\n    - tag1\n    - tag2\n</code></pre>"},{"location":"docs/schemas/job/#values.cloudsql","title":"<code>cloudsql</code>","text":"<p>0.1.0 <code>object</code> </p> <p>CloudSQL configuration for the Cloud Run service. If not provided, the service will not be connected to any CloudSQL instances.</p> <p>Info</p> <p>Defining this will automatically inject a <code>CLOUD_SQL_CONNECTION</code> environment variable with the format <code>/cloudsql/project:region:instance</code>. Some libraries will automatically append the required <code>/.s.PGSQL.5432</code> suffix to connect to the correct unix socket, while others do not. The environment variable is provided without the socket suffix.</p> Direct CloudSQL Connection in same regionDirect CloudSQL Connection in different region <pre><code>cloudsql: \n  instance: my-instance\n  project: my-project\n</code></pre> <pre><code>cloudsql: \n  instance: my-instance\n  project: my-project\n  region: europe-west1\n</code></pre>"},{"location":"docs/schemas/job/#values.cloudsql.instance","title":"<code>instance</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL instance name.</p> <pre><code>cloudsql:\n  instance: my-instance\n</code></pre>"},{"location":"docs/schemas/job/#values.cloudsql.project","title":"<code>project</code>","text":"<p>0.1.0 <code>string</code> </p> <p>CloudSQL project name.</p> <pre><code>cloudsql:\n  project: my-project\n</code></pre>"},{"location":"docs/schemas/job/#values.cloudsql.region","title":"<code>region</code>","text":"<p>0.1.0 <code>string</code> <code>.region</code></p> <p>CloudSQL region. Defaults to the region of the Cloud Run service.</p> <pre><code>cloudsql:\n  region: us-central1\n</code></pre>"},{"location":"docs/schemas/job/#values.executionEnvironment","title":"<code>executionEnvironment</code>","text":"<p>0.1.0 <code>string</code> <code>gen2</code> \u00b7 <code>gen1</code> <code>gen2</code></p> <p>The execution environment to use for the Cloud Run container.</p> <pre><code>executionEnvironment: gen1\n</code></pre>"},{"location":"docs/schemas/job/#values.launchStage","title":"<code>launchStage</code>","text":"<p>0.1.0 <code>string</code> <code>ALPHA</code> \u00b7 <code>BETA</code> \u00b7 <code>GA</code> <code>BETA</code></p> <p>The launch stage of the Cloud Run service. Controls feature availability.</p> <pre><code>launchStage: GA\n</code></pre>"},{"location":"docs/schemas/job/#values.binaryAuthorization","title":"<code>binaryAuthorization</code>","text":"<p>0.1.0 <code>boolean</code> <code>False</code></p> <p>Whether to enforce Binary Authorization policy for this service.</p> <pre><code>binaryAuthorization: true\n</code></pre>"},{"location":"docs/schemas/job/#values.encryption","title":"<code>encryption</code>","text":"<p>0.1.0 <code>object</code> </p> <p>The KMS key to use for encrypting this service. Must be located in the same region and project as the Cloud Run service.</p> <pre><code>encryption: \n  key: my-key\n  keyring: my-keyring\n</code></pre>"},{"location":"docs/schemas/job/#values.encryption.key","title":"<code>key</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS key to use for encrypting this service.</p>"},{"location":"docs/schemas/job/#values.encryption.keyring","title":"<code>keyring</code>","text":"<p>0.1.0 <code>string</code> </p> <p>The KMS keyring where the key is stored.</p>"},{"location":"docs/schemas/job/CHANGELOG/","title":"Changelog","text":""},{"location":"docs/schemas/job/CHANGELOG/#1.0.0","title":"1.0.0(https://github.com/helmless/google-cloudrun-charts/compare/google-cloudrun-job-v0.1.1...google-cloudrun-job-v1.0.0) (2025-03-27)","text":""},{"location":"docs/schemas/job/CHANGELOG/#features","title":"Features","text":"<ul> <li>add globals for project and region (#5) (f3c3230)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>deps: update common chart dependency (aee27ae)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#miscellaneous-chores","title":"Miscellaneous Chores","text":"<ul> <li>release 1.0.0 (9d28835)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#0.1.1","title":"0.1.1(https://github.com/helmless/helmless/compare/google-cloudrun-job-v0.1.0...google-cloudrun-job-v0.1.1) (2025-03-21)","text":""},{"location":"docs/schemas/job/CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>trigger release and set new icon (81d71db)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#0.1.0","title":"0.1.0 (2025-03-19)","text":""},{"location":"docs/schemas/job/CHANGELOG/#features_1","title":"Features","text":"<ul> <li>extract common helm chart and schema (d8e1d69)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>derefenrence schema before commit (637b754)</li> </ul>"},{"location":"docs/schemas/job/CHANGELOG/#miscellaneous-chores_1","title":"Miscellaneous Chores","text":"<ul> <li>release 0.1.0 (f455943)</li> <li>release 1.0.0 (f455943)</li> <li>release 1.0.0 (f455943)</li> </ul>"}]}