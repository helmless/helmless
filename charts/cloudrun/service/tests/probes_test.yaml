# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Probe Configuration Tests
templates:
  - manifest.yaml
set:
  name: my-service
  image: gcr.io/my-project/my-app:v1
  project: my-project

tests:
  # Startup Probe Tests
  - it: should configure HTTP startup probe with all settings
    set:
      startupProbe:
        initialDelaySeconds: 5
        periodSeconds: 10
        timeoutSeconds: 3
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          httpHeaders:
            - name: Custom-Header
              value: test-value
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.httpHeaders[0].name
          value: Custom-Header
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.httpHeaders[0].value
          value: test-value
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 5
      - equal:
          path: spec.template.spec.containers[0].startupProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.timeoutSeconds
          value: 3
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 5

  - it: should configure TCP startup probe
    set:
      startupProbe:
        tcpSocket:
          port: 8080
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 0
      - equal:
          path: spec.template.spec.containers[0].startupProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.timeoutSeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 3

  - it: should configure gRPC startup probe with service name
    set:
      startupProbe:
        grpc:
          port: 8080
          service: health.check
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.service
          value: health.check

  - it: should allow gRPC probe without service field
    set:
      startupProbe:
        grpc:
          port: 8080
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.port
          value: 8080
      - isNull:
          path: spec.template.spec.containers[0].startupProbe.grpc.service

  - it: should allow gRPC probe with service field
    set:
      startupProbe:
        grpc:
          port: 8080
          service: 'grpc.health.v1.Health'
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.grpc.service
          value: 'grpc.health.v1.Health'

  # Liveness Probe Tests
  - it: should configure HTTP liveness probe with all settings
    set:
      livenessProbe:
        initialDelaySeconds: 15
        periodSeconds: 20
        timeoutSeconds: 2
        failureThreshold: 4
        httpGet:
          path: /live
          port: 8080
          httpHeaders:
            - name: Custom-Header
              value: live-value
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /live
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.httpHeaders[0].name
          value: Custom-Header
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.httpHeaders[0].value
          value: live-value
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 15
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 2
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 4

  - it: should configure gRPC liveness probe
    set:
      livenessProbe:
        grpc:
          port: 8080
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.grpc.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 0
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.timeoutSeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 3

  # Validation Tests
  - it: should fail when liveness probe uses TCP socket
    set:
      livenessProbe:
        tcpSocket:
          port: 8080
    asserts:
      - failedTemplate: {}

  - it: should fail when both HTTP and gRPC probes are configured
    set:
      startupProbe:
        httpGet:
          path: /health
          port: 8080
        grpc:
          port: 8080
    asserts:
      - failedTemplate: {}

  # Default Port Tests
  - it: should use containerPort when probe port is not specified
    set:
      containerPort: 3000
      startupProbe:
        httpGet:
          path: /health
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: 3000

  # Combined Probe Tests
  - it: should allow both startup and liveness probes
    set:
      startupProbe:
        httpGet:
          path: /startup
          port: 8080
      livenessProbe:
        httpGet:
          path: /live
          port: 8080
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /startup
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /live

  # Default Configuration Tests
  - it: should configure default TCP startup probe when no probe configuration is provided
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket.port
          value: 8080 # default containerPort
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 0
      - equal:
          path: spec.template.spec.containers[0].startupProbe.periodSeconds
          value: 10
      - equal:
          path: spec.template.spec.containers[0].startupProbe.timeoutSeconds
          value: 1
      - equal:
          path: spec.template.spec.containers[0].startupProbe.failureThreshold
          value: 3
      - isNull:
          path: spec.template.spec.containers[0].livenessProbe

  - it: should use custom containerPort in default TCP startup probe
    set:
      containerPort: 3000
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket.port
          value: 3000
      - isNull:
          path: spec.template.spec.containers[0].livenessProbe

  - it: should allow overriding default startup probe
    set:
      startupProbe:
        httpGet:
          path: /health
          port: 8080
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: 8080
      - isNull:
          path: spec.template.spec.containers[0].startupProbe.tcpSocket

  - it: should not set liveness probe when not configured
    asserts:
      - isNull:
          path: spec.template.spec.containers[0].livenessProbe

  - it: should fail when timeout exceeds period
    set:
      startupProbe:
        periodSeconds: 10
        timeoutSeconds: 20
        tcpSocket:
          port: 8080
    asserts:
      - failedTemplate:
          errorMessage: 'timeoutSeconds (20) cannot exceed periodSeconds (10)'

  - it: should fail when startup probe period exceeds 240 seconds
    set:
      startupProbe:
        periodSeconds: 300
        grpc:
          port: 8080
    asserts:
      - failedTemplate:
          errorMessage: 'startupProbe.periodSeconds cannot exceed 240 seconds'

  - it: should fail when liveness probe period exceeds 3600 seconds
    set:
      livenessProbe:
        periodSeconds: 4000
        httpGet:
          path: /live
    asserts:
      - failedTemplate:
          errorMessage: 'livenessProbe.periodSeconds cannot exceed 3600 seconds'

  - it: should fail when HTTP probe is used with HTTP/2
    set:
      http2: true
      startupProbe:
        httpGet:
          path: /health
          port: 8080
    asserts:
      - failedTemplate:
          errorMessage: 'HTTP probes are not compatible with HTTP/2 (h2c)'
