# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: Test helper functions
templates:
  - helpers.yaml
tests:
  # Image Helper Tests
  - it: should correctly format image reference from string
    set:
      image: "gcr.io/project/image:tag"
    asserts:
      - equal:
          path: image
          value: gcr.io/project/image:tag

  - it: should correctly format image reference from object
    set:
      image:
        registry: "gcr.io"
        repository: "project"
        name: "image"
        tag: "v1"
    asserts:
      - equal:
          path: image
          value: gcr.io/project/image:v1

  - it: should correctly format image without registry
    set:
      image:
        repository: "project"
        name: "image"
        tag: "v1"
    asserts:
      - equal:
          path: image
          value: project/image:v1

  # Environment Variables Helper Tests
  - it: should correctly format environment variables
    set:
      env:
        KEY1: "value1"
        KEY2: "value2"
    asserts:
      - contains:
          path: env
          content:
            name: "KEY1"
            value: "value1"
      - contains:
          path: env
          content:
            name: "KEY2"
            value: "value2"

  # Secret References Helper Tests
  - it: should correctly format simple secret references
    set:
      secrets:
        SECRET1: "my-secret"
    asserts:
      - contains:
          path: env
          content:
            name: "SECRET1"
            valueFrom:
              secretKeyRef:
                name: "my-secret"
                key: "latest"

  - it: should correctly format secret references with version
    set:
      secrets:
        SECRET2:
          secret: "another-secret"
          version: "2"
    asserts:
      - contains:
          path: env
          content:
            name: "SECRET2"
            valueFrom:
              secretKeyRef:
                name: "another-secret"
                key: "2"

  - it: should correctly format cross-project secret references
    set:
      secrets:
        SECRET3:
          secret: "cross-secret"
          project: "other-project"
          version: "3"
    asserts:
      - contains:
          path: env
          content:
            name: "SECRET3"
            valueFrom:
              secretKeyRef:
                name: "SECRET3"
                key: "3"
      - equal:
          path: crossProjectSecrets
          value: SECRET3:projects/other-project/secrets/cross-secret

  - it: should correctly format multiple cross-project secret references
    set:
      secrets:
        SECRET1:
          secret: "secret1"
          project: "project1"
        SECRET2:
          secret: "secret2"
          project: "project2"
    asserts:
      - equal:
          path: crossProjectSecrets
          value: SECRET1:projects/project1/secrets/secret1,SECRET2:projects/project2/secrets/secret2

  # Labels Helper Tests
  - it: should generate correct common labels
    set:
      project: "my-project"
    chart:
      version: "1.2.3"
    release:
      name: "test-release"
    asserts:
      - equal:
          path: labels
          value:
            project: "my-project"
            release: "test-release"
            helmless-chart: "google-cloudrun-common-tests"
            helmless-chart-version: "1_2_3"
            managed-by: helmless

  # Region Helper Tests
  - it: should use default region when not specified
    asserts:
      - equal:
          path: region
          value: us-central1

  - it: should use specified region
    set:
      region: "europe-west1"
    asserts:
      - equal:
          path: region
          value: europe-west1

  # Network Interfaces Helper Tests
  - it: should correctly format network interfaces
    set:
      network:
        vpc: "my-vpc"
        subnetwork: "my-subnet"
        tags: ["tag1", "tag2"]
    asserts:
      - equal:
          path: networkInterfaces
          value: '[{"network":"my-vpc","subnetwork":"my-subnet","tags":["tag1","tag2"]}]'

  - it: should correctly format network interfaces without tags
    set:
      network:
        vpc: "my-vpc"
        subnetwork: "my-subnet"
    asserts:
      - equal:
          path: networkInterfaces
          value: '[{"network":"my-vpc","subnetwork":"my-subnet","tags":[]}]'

  # CloudSQL Helper Tests
  - it: should correctly format CloudSQL connection string
    set:
      cloudsql:
        project: "sql-project"
        instance: "sql-instance"
        region: "us-central1"
    asserts:
      - equal:
          path: cloudsql
          value: sql-project:us-central1:sql-instance

  - it: should use default region for CloudSQL when not specified
    set:
      cloudsql:
        project: "sql-project"
        instance: "sql-instance"
    asserts:
      - equal:
          path: cloudsql
          value: sql-project:us-central1:sql-instance

  # Volume Helper Tests
  - it: should correctly format secret volume
    set:
      testVolume:
        secret:
          name: "my-secret"
          items:
            - path: "config.json"
              version: "latest"
    asserts:
      - equal:
          path: volume
          value:
            secret:
              secretName: "my-secret"
              items:
                - key: "latest"
                  path: "config.json"

  - it: should correctly format emptyDir volume
    set:
      testVolume:
        emptyDir:
          size: "256Mi"
    asserts:
      - equal:
          path: volume
          value:
            emptyDir:
              medium: Memory
              sizeLimit: "256Mi"

  - it: should correctly format GCS volume
    set:
      testVolume:
        gcs:
          bucket: "my-bucket"
          mountOptions:
            file-mode: "0644"
            dir-mode: "0755"
    asserts:
      - equal:
          path: volume
          value:
            csi:
              driver: "gcsfuse.run.googleapis.com"
              volumeAttributes:
                bucketName: "my-bucket"
                mountOptions: "dir-mode=0755,file-mode=0644"

  - it: should correctly format NFS volume
    set:
      testVolume:
        nfs:
          server: "10.0.0.1"
          path: "/exports/data"
    asserts:
      - equal:
          path: volume
          value:
            nfs:
              server: "10.0.0.1"
              path: "/exports/data"

  # Volumes Helper Tests
  - it: should correctly format multiple volumes
    set:
      volumes:
        config:
          secret:
            name: "config-secret"
            items:
              - path: "config.json"
                version: "latest"
        cache:
          emptyDir:
            size: "256Mi"
    asserts:
      - contains:
          path: volumes
          content:
            name: "config"
            secret:
              secretName: "config-secret"
              items:
                - key: "latest"
                  path: "config.json"
      - contains:
          path: volumes
          content:
            name: "cache"
            emptyDir:
              medium: Memory
              sizeLimit: "256Mi"

  - it: should correctly format volumes with different types
    set:
      volumes:
        data:
          gcs:
            bucket: "data-bucket"
        shared:
          nfs:
            server: "10.0.0.2"
            path: "/exports/shared"
    asserts:
      - contains:
          path: volumes
          content:
            name: "data"
            csi:
              driver: "gcsfuse.run.googleapis.com"
              volumeAttributes:
                bucketName: "data-bucket"
      - contains:
          path: volumes
          content:
            name: "shared"
            nfs:
              server: "10.0.0.2"
              path: "/exports/shared"
