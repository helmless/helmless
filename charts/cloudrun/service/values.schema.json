{
  "$id": "https://github.com/helmless/helmless/charts/cloudrun/service",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "version": "0.1.1",
  "additionalProperties": false,
  "title": "Cloud Run Service Chart",
  "description": "A Helm chart to template the manifest of a Cloud Run service or job.",
  "required": [
    "name",
    "project"
  ],
  "type": "object",
  "examples": [
    {
      "$title": "Minimal Service",
      "name": "my-service",
      "image": "ghcr.io/my-org/my-image@sha256:abc123",
      "region": "us-central1",
      "env": {
        "MY_ENV_VAR": "my-value"
      },
      "autoscaling": {
        "minScale": "0 # scale to zero"
      }
    },
    {
      "$title": "Service with Direct VPC Connect",
      "name": "my-service",
      "image": "ghcr.io/my-org/my-image@sha256:abc123",
      "region": "us-central1",
      "vpc": {
        "network": "my-network",
        "subnetwork": "my-subnetwork"
      }
    }
  ],
  "properties": {
    "global": {
      "type": "object",
      "additionalProperties": true,
      "description": "Global settings of the Helm chart.",
      "$since": "0.1.1"
    },
    "name": {
      "description": "Name of the Cloud Run Service to deploy. Must be unique within the project region combination.",
      "maxLength": 63,
      "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
      "deprecated": true,
      "type": [
        "string"
      ],
      "examples": [
        "my-service"
      ],
      "$since": "0.1.0"
    },
    "project": {
      "description": "The google cloud project to deploy the Cloud Run service to.",
      "type": "string",
      "examples": [
        "my-project"
      ],
      "$since": "0.1.0"
    },
    "region": {
      "description": "The region to deploy the CloudRun service to. Uses the default region if not provided.",
      "type": [
        "string"
      ],
      "default": "us-central1",
      "pattern": "^(asia|europe|me|us|africa|australia|northamerica|southamerica)-[a-z]+(\\d+)$",
      "examples": [
        "us-central1",
        "europe-west1",
        "asia-east1"
      ],
      "$since": "0.1.0"
    },
    "image": {
      "$ref": "#/$defs/imageProperties",
      "$since": "0.1.0"
    },
    "revisionName": {
      "description": "The name of the Cloud Run revision to deploy. If not provided, a random name will be generated. The revision will always be prefixed with the service name.",
      "type": "string",
      "examples": [
        "my-revision"
      ],
      "$since": "0.1.0"
    },
    "containerName": {
      "description": "Optional name for the container within a revision. Automatically generated if not supplied.",
      "type": "string",
      "examples": [
        "my-container"
      ],
      "$since": "0.1.0"
    },
    "description": {
      "description": "A human-readable description of the CloudRun service.",
      "type": "string",
      "examples": [
        "My service does xyz."
      ],
      "$since": "0.1.0"
    },
    "env": {
      "description": "Environment variables to set in the CloudRun container. Using an object allows merging of multiple values, e.g. `env.staging` and `env.production`.",
      "type": [
        "object"
      ],
      "additionalProperties": true,
      "examples": [
        {
          "MY_ENV_VAR": "my-value"
        }
      ],
      "$since": "0.1.0"
    },
    "secrets": {
      "description": "Secrets to map as environment variables in the Cloud Run container.",
      "type": "object",
      "examples": [
        {
          "$title": "Latest Secret",
          "MY_ENV_VAR": "my-secret-name"
        },
        {
          "$title": "Specific Secret Version",
          "MY_ENV_VAR": {
            "secret": "my-secret-name",
            "version": "2"
          }
        },
        {
          "$title": "Cross Project Secret with Project Number",
          "MY_ENV_VAR": {
            "secret": "another-secret-name",
            "project": "123456789",
            "version": "1"
          }
        },
        {
          "$title": "Cross Project Secret with Project ID",
          "MY_ENV_VAR": {
            "secret": "another-secret-name",
            "project": "my-project-id",
            "version": "1"
          }
        },
        {
          "$title": "Mixed Local and Cross Project Secrets",
          "LOCAL_ENV_VAR": "my-secret-name",
          "CROSS_ENV_VAR": {
            "secret": "another-secret-name",
            "project": "my-project-id"
          }
        }
      ],
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string",
            "description": "A direct mapping between an environment variable and a secret in Secret Manager. Always uses the latest version of the secret."
          },
          {
            "type": "object",
            "description": "A secret to mount as an environment variable in the Cloud Run container.",
            "properties": {
              "secret": {
                "type": "string",
                "description": "Name of the secret in Secret Manager.",
                "$since": "0.1.0"
              },
              "version": {
                "type": "string",
                "default": "latest",
                "description": "Version of the secret to use. Defaults to the latest version.",
                "$since": "0.1.0"
              },
              "project": {
                "type": "string",
                "description": "Project ID or project number of the secret. Required for cross-project secrets.",
                "$since": "0.1.0"
              }
            },
            "required": [
              "secret"
            ]
          }
        ]
      },
      "$since": "0.1.0"
    },
    "command": {
      "description": "Command that runs when the container starts.",
      "default": [],
      "type": [
        "array"
      ],
      "examples": [
        [
          "echo",
          "Hello, world!"
        ]
      ],
      "$since": "0.1.0"
    },
    "args": {
      "description": "Arguments to pass to the command.",
      "default": [],
      "type": [
        "array"
      ],
      "examples": [
        [
          "--help"
        ]
      ],
      "$since": "0.1.0"
    },
    "autoscaling": {
      "$ref": "#/$defs/autoscalingProperties",
      "$since": "0.1.0"
    },
    "sessionAffinity": {
      "default": false,
      "description": "Whether to enable session affinity for the CloudRun service. When enabled, requests from the same client are routed to the same container instance.",
      "type": [
        "boolean"
      ],
      "examples": [
        true
      ],
      "$since": "0.1.0"
    },
    "resources": {
      "description": "Resource requests and limits for the CloudRun container. If not provided, defaults are used.",
      "type": [
        "object"
      ],
      "examples": [
        {
          "$title": "Default",
          "cpuThrottling": true,
          "startupBoost": false,
          "limits": {
            "cpu": 1,
            "memory": "512Mi"
          }
        },
        {
          "$title": "Reduced Scaling Latency",
          "cpuThrottling": false,
          "startupBoost": true
        },
        {
          "$title": "High Memory",
          "limits": {
            "cpu": 4,
            "memory": "8Gi"
          }
        }
      ],
      "properties": {
        "cpuThrottling": {
          "default": true,
          "description": "Whether to throttle the CPU. This has significant impact on billing if set to `false`.",
          "type": [
            "boolean"
          ],
          "examples": [
            false
          ],
          "$since": "0.1.0"
        },
        "gpu": {
          "default": false,
          "description": "Whether to enable [GPU support](https://cloud.google.com/run/docs/configuring/services/gpu#yaml) for the Cloud Run container. Only a single GPU per cloud run container is supported and will incur additional costs.",
          "type": [
            "boolean"
          ],
          "examples": [
            true
          ],
          "$since": "0.1.0"
        },
        "limits": {
          "properties": {
            "cpu": {
              "default": 1,
              "description": "Maximum CPUs to allocate for the Cloud Run container.  \n*Can be 1, 2, 4, 6, 8, or any fractional value from 0.08 to less than 1 in increments of 0.01.*\n\nThe following are minimum memory requirements for CPUs:\n\n| CPUs | Minimum memory |\n|------|----------------|\n| 4    | 2 GiB          |\n| 6    | 4 GiB          |\n| 8    | 4 GiB          |\n\n!!! warning \"If you use less than 1 CPU, the following requirments are enforced:\"\n\n    | Setting | Requirement |\n    |---------|-------------|\n    | Memory | A minimum of 0.5 CPU is needed to set a memory limit greater than 512MiB.<br>A minimum of 1 CPU is needed to set a memory limit greater than 1GiB. |\n    | Concurrency | Maximum concurrency must be set to 1. |\n    | CPU allocated | CPU allocation must be set to CPU allocated only during request processing. |\n    | Execution environment | You must use the first generation execution environment. |\n",
              "type": "number",
              "anyOf": [
                {
                  "enum": [
                    1,
                    2,
                    4,
                    6,
                    8
                  ]
                },
                {
                  "type": "number",
                  "minimum": 0.08,
                  "maximum": 0.99,
                  "multipleOf": 0.01
                }
              ],
              "examples": [
                {
                  "$title": "Minimum",
                  "$value": 0.08
                },
                {
                  "$title": "Maximum",
                  "$value": 8
                }
              ],
              "$since": "0.1.0"
            },
            "memory": {
              "description": "Maximum memory to allocate for the Cloud Run container. Must be at least 2GiB for 4 CPUs and 4GiB for 6-8 CPUs.",
              "type": "string",
              "default": "512Mi",
              "pattern": "^\\d+(\\.\\d+)?(Mi|Gi)$",
              "examples": [
                "2Gi",
                "1024Mi"
              ],
              "$since": "0.1.0"
            }
          },
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "cpu": {
                    "minimum": 4,
                    "maximum": 4,
                    "$since": "0.1.0"
                  }
                }
              },
              "then": {
                "properties": {
                  "memory": {
                    "pattern": "^([2-9]|[1-9][0-9]+)Gi$|^(2048|[2-9][0-9]{3}|[1-9][0-9]{4,})Mi$",
                    "$since": "0.1.0"
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "cpu": {
                    "minimum": 6,
                    "$since": "0.1.0"
                  }
                }
              },
              "then": {
                "properties": {
                  "memory": {
                    "pattern": "^([4-9]|[1-9][0-9]+)Gi$|^(4096|[4-9][0-9]{3}|[1-9][0-9]{4,})Mi$",
                    "$since": "0.1.0"
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "cpu": {
                    "maximum": 0.49,
                    "$since": "0.1.0"
                  }
                }
              },
              "then": {
                "properties": {
                  "memory": {
                    "pattern": "^([0-4]?[0-9]{1,2}|50[0-9]|51[0-2])Mi$",
                    "$since": "0.1.0"
                  }
                }
              }
            },
            {
              "if": {
                "properties": {
                  "cpu": {
                    "minimum": 0.5,
                    "maximum": 0.99,
                    "$since": "0.1.0"
                  }
                }
              },
              "then": {
                "properties": {
                  "memory": {
                    "pattern": "^([0-9]{1,3}|10[0-2][0-4])Mi$",
                    "$since": "0.1.0"
                  }
                }
              }
            }
          ],
          "$since": "0.1.0"
        },
        "startupBoost": {
          "default": false,
          "description": "Whether to boost the CPUs at the start of the container.",
          "type": [
            "boolean"
          ],
          "examples": [
            false
          ],
          "$since": "0.1.0"
        }
      },
      "$since": "0.1.0"
    },
    "containerPort": {
      "description": "Container port to expose. In CloudRun only a single port can be exposed and defaults to 8080.",
      "type": [
        "integer"
      ],
      "default": 8080,
      "examples": [
        8081
      ],
      "$since": "0.1.0"
    },
    "http2": {
      "description": "Whether to use HTTP/2 for the container port. If enabled, the port name will be h2c instead of http1.",
      "type": "boolean",
      "default": false,
      "examples": [
        true
      ],
      "$since": "0.1.0"
    },
    "ingress": {
      "description": "The ingress settings for the CloudRun service. Controls where the service can be accessed from.",
      "enum": [
        "all",
        "internal",
        "internal-and-cloud-load-balancing"
      ],
      "default": "all",
      "type": "string",
      "examples": [
        "internal"
      ],
      "$since": "0.1.0"
    },
    "startupProbe": {
      "description": "The startup probe controls how the Cloud Run service is monitored for readiness. And new revisions will only replace the running container if the startup probe succeeds.",
      "examples": [
        {
          "$title": "HTTP",
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "timeoutSeconds": 1,
          "failureThreshold": 3,
          "httpGet": {
            "path": "/health",
            "port": 8080,
            "httpHeaders": [
              {
                "name": "X-Custom-Header",
                "value": "my-value"
              }
            ]
          }
        },
        {
          "$title": "TCP",
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "timeoutSeconds": 1,
          "failureThreshold": 3,
          "tcpSocket": {
            "port": 8080
          }
        },
        {
          "$title": "gRPC",
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "timeoutSeconds": 1,
          "failureThreshold": 3,
          "grpc": {
            "port": 8080
          }
        }
      ],
      "oneOf": [
        {
          "$ref": "#/$defs/httpProbe"
        },
        {
          "$ref": "#/$defs/tcpProbe"
        },
        {
          "$ref": "#/$defs/grpcProbe"
        }
      ],
      "allOf": [
        {
          "$ref": "#/$defs/probeProperties"
        }
      ],
      "$since": "0.1.0"
    },
    "livenessProbe": {
      "description": "The liveness probe controls how the Cloud Run service is monitored for health. If a liveness probe does not succeed within the specified time (failureThreshold * periodSeconds), the container is shut down using a SIGKILL signal. Any remaining requests that were still being served by the container are terminated with the HTTP status code 503. After the container is shut down, Cloud Run autoscaling starts up a new container instance.",
      "examples": [
        {
          "$title": "HTTP",
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "timeoutSeconds": 1,
          "failureThreshold": 3,
          "httpGet": {
            "path": "/health",
            "port": 8080
          }
        },
        {
          "$title": "gRPC",
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "timeoutSeconds": 1,
          "failureThreshold": 3,
          "grpc": {
            "port": 8080
          }
        }
      ],
      "oneOf": [
        {
          "$ref": "#/$defs/httpProbe"
        },
        {
          "$ref": "#/$defs/grpcProbe"
        }
      ],
      "allOf": [
        {
          "$ref": "#/$defs/probeProperties"
        }
      ],
      "$since": "0.1.0"
    },
    "serviceAccountName": {
      "description": "Service account to use to run the CloudRun container. If not provided, the default service account of the project is used.",
      "type": "string",
      "examples": [
        "my-service-account@my-project.iam.gserviceaccount.com"
      ],
      "$since": "0.1.0"
    },
    "labels": {
      "description": "Labels to add to the Cloud Run container. Must conform to the Cloud Run label schema of lowercase alphanumeric characters, hyphens, and underscores and be 63 characters or less.",
      "type": "object",
      "examples": [
        {
          "my-label": "my-value"
        }
      ],
      "patternProperties": {
        "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$": {
          "$id": "label",
          "type": "string",
          "maxLength": 63,
          "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
          "description": "Label key and value must conform to the Cloud Run label schema of lowercase alphanumeric characters, hyphens, and underscores and be 63 characters or less.",
          "$since": "0.1.0"
        }
      },
      "propertyNames": {
        "maxLength": 63,
        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      },
      "additionalProperties": false,
      "$since": "0.1.0"
    },
    "volumes": {
      "type": "object",
      "description": "Volume configurations for the Cloud Run container. Each key is the volume name and must be a valid k8s name (lowercase alphanumeric with dashes).",
      "examples": [
        {
          "$title": "Secret",
          "config": {
            "mountPath": "/etc/config",
            "secret": {
              "name": "my-secret",
              "items": [
                {
                  "version": "1",
                  "path": "config.json"
                }
              ]
            }
          }
        },
        {
          "$title": "EmptyDir",
          "cache": {
            "mountPath": "/cache",
            "readOnly": false,
            "emptyDir": {
              "sizeLimit": "256Mi",
              "medium": "Memory"
            }
          }
        },
        {
          "$title": "GCS",
          "data": {
            "mountPath": "/data",
            "gcs": {
              "bucket": "my-data-bucket",
              "mountOptions": {
                "file-mode": "0644",
                "dir-mode": "0755"
              }
            }
          }
        },
        {
          "$title": "NFS",
          "shared": {
            "mountPath": "/shared",
            "nfs": {
              "server": "10.0.0.1",
              "path": "/exports/data"
            }
          }
        }
      ],
      "patternProperties": {
        "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$": {
          "type": "object",
          "$id": "volume",
          "required": [
            "mountPath"
          ],
          "properties": {
            "mountPath": {
              "type": "string",
              "description": "Path where the volume should be mounted in the container",
              "pattern": "^/.*",
              "examples": [
                "/data"
              ],
              "$since": "0.1.0"
            },
            "readOnly": {
              "type": "boolean",
              "description": "Whether the volume should be mounted read-only",
              "default": false,
              "examples": [
                true
              ],
              "$since": "0.1.0"
            }
          },
          "oneOf": [
            {
              "required": [
                "secret"
              ],
              "properties": {
                "secret": {
                  "type": "object",
                  "description": "Mount a Secret Manager secret as a volume",
                  "examples": [
                    {
                      "$title": "Latest Secret Version Mount",
                      "name": "my-secret",
                      "items": [
                        {
                          "path": "config.json"
                        }
                      ]
                    },
                    {
                      "$title": "Multiple Secret Versions Mount",
                      "name": "my-secret",
                      "items": [
                        {
                          "version": "1",
                          "path": "old_key.pem"
                        },
                        {
                          "version": "2",
                          "path": "new_key.pem"
                        }
                      ]
                    },
                    {
                      "$title": "Cross-Project Secret Mount",
                      "name": "my-secret",
                      "project": "my-project",
                      "items": [
                        {
                          "version": "1",
                          "path": "config.json"
                        }
                      ]
                    }
                  ],
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the secret in Secret Manager",
                      "$since": "0.1.0"
                    },
                    "project": {
                      "type": "string",
                      "description": "Project ID for cross-project secrets. If not provided, the project of the Cloud Run service is used.",
                      "$since": "0.1.0"
                    },
                    "items": {
                      "type": "array",
                      "description": "List of specific secret versions to mount",
                      "items": {
                        "type": "object",
                        "required": [
                          "path"
                        ],
                        "properties": {
                          "version": {
                            "type": "string",
                            "description": "Version of the secret to mount",
                            "default": "latest",
                            "$since": "0.1.0"
                          },
                          "path": {
                            "type": "string",
                            "description": "Path where the secret will be mounted",
                            "$since": "0.1.0"
                          }
                        }
                      },
                      "$since": "0.1.0"
                    }
                  },
                  "$since": "0.1.0"
                }
              }
            },
            {
              "required": [
                "emptyDir"
              ],
              "properties": {
                "emptyDir": {
                  "type": "object",
                  "description": "Create an ephemeral in memory volume that exists for the lifetime of the container",
                  "required": [
                    "size"
                  ],
                  "examples": [
                    {
                      "size": "256Mi"
                    }
                  ],
                  "properties": {
                    "size": {
                      "type": "string",
                      "description": "Maximum size of the volume. Must not exceed the memory limit of the container.",
                      "pattern": "^\\d+(\\.\\d+)?(Mi|Gi)$",
                      "$since": "0.1.0"
                    }
                  },
                  "$since": "0.1.0"
                }
              }
            },
            {
              "required": [
                "gcs"
              ],
              "properties": {
                "gcs": {
                  "type": "object",
                  "description": "Mounts a Google Cloud Storage bucket.",
                  "examples": [
                    {
                      "$title": "GCS Bucket",
                      "bucket": "my-bucket"
                    },
                    {
                      "$title": "Bucket with Mount Options",
                      "bucket": "my-bucket",
                      "mountOptions": {
                        "file-mode": "0644",
                        "dir-mode": "0755"
                      }
                    }
                  ],
                  "required": [
                    "bucket"
                  ],
                  "properties": {
                    "bucket": {
                      "type": "string",
                      "description": "Name of the GCS bucket to mount",
                      "$since": "0.1.0"
                    },
                    "mountOptions": {
                      "type": "object",
                      "description": "Additional [mount options](https://cloud.google.com/run/docs/configuring/services/cloud-storage-volume-mounts#common-mount-options) for gcsfuse",
                      "additionalProperties": true,
                      "$since": "0.1.0"
                    }
                  },
                  "$since": "0.1.0"
                }
              }
            },
            {
              "required": [
                "nfs"
              ],
              "properties": {
                "nfs": {
                  "type": "object",
                  "description": "Mount an NFS share. The Cloud Run container must be connected via a VPC connector or direct VPC connection to the subnet where the NFS server is located.",
                  "required": [
                    "server",
                    "path"
                  ],
                  "examples": [
                    {
                      "server": "10.0.0.1",
                      "path": "/exports/data"
                    }
                  ],
                  "properties": {
                    "server": {
                      "type": "string",
                      "description": "IP address or hostname of the NFS server",
                      "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}$|^[a-zA-Z0-9][-a-zA-Z0-9.]*[a-zA-Z0-9]$",
                      "$since": "0.1.0"
                    },
                    "path": {
                      "type": "string",
                      "description": "Path that is exported by the NFS server",
                      "pattern": "^/.*",
                      "$since": "0.1.0"
                    }
                  },
                  "$since": "0.1.0"
                }
              }
            }
          ],
          "$since": "0.1.0"
        }
      },
      "$since": "0.1.0"
    },
    "network": {
      "type": "object",
      "description": "VPC and networking configuration for the Cloud Run service",
      "examples": [
        {
          "$title": "Direct VPC Connection",
          "vpc": "my-vpc",
          "subnetwork": "my-subnet",
          "egress": "all-traffic"
        },
        {
          "$title": "VPC Connector",
          "egress": "private-ranges-only",
          "connector": "my-connector"
        },
        {
          "$title": "Cross-Project VPC Access",
          "vpc": "projects/other-project/global/networks/my-vpc",
          "subnetwork": "projects/other-project/regions/us-central1/subnetworks/my-subnet",
          "egress": "all-traffic"
        }
      ],
      "properties": {
        "egress": {
          "description": "The egress type to use for the Cloud Run container if connected to a VPC. In general, use `private-ranges-only` to reduce latency and bottlenecks when calling external services. Can only be set when `connector` or `vpc` and `subnetwork` are set.",
          "enum": [
            "private-ranges-only",
            "all-traffic"
          ],
          "default": "private-ranges-only",
          "type": "string",
          "examples": [
            "all-traffic"
          ],
          "$since": "0.1.0"
        }
      },
      "oneOf": [
        {
          "required": [
            "connector"
          ],
          "properties": {
            "connector": {
              "type": "string",
              "description": "Name of the VPC connector to use for the CloudRun container. Uses a serverless VPC access connector. Cannot be used with network.",
              "pattern": "^(projects/[^/]+/locations/[^/]+/connectors/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$",
              "examples": [
                "projects/my-project/locations/us-central1/connectors/my-connector",
                "my-connector"
              ],
              "$since": "0.1.0"
            }
          }
        },
        {
          "required": [
            "vpc",
            "subnetwork"
          ],
          "properties": {
            "vpc": {
              "type": "string",
              "description": "Name of the VPC network to use to create a direct VPC connection. Must be used with subnetwork. Cannot be used with connector.",
              "pattern": "^(projects/[^/]+/global/networks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$",
              "examples": [
                "projects/my-project/global/networks/my-vpc",
                "my-vpc"
              ],
              "$since": "0.1.0"
            },
            "subnetwork": {
              "type": "string",
              "description": "Name of the VPC subnetwork to use to create a direct VPC connection. Must be used with vpc. Cannot be used with connector.",
              "pattern": "^(projects/[^/]+/regions/[^/]+/subnetworks/[^/]+|[a-z][-a-z0-9]*[a-z0-9])$",
              "examples": [
                "projects/my-project/regions/us-central1/subnetworks/my-subnet",
                "my-subnet"
              ],
              "$since": "0.1.0"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "examples": [
                [
                  "tag1",
                  "tag2"
                ]
              ],
              "description": "Tags to apply to the network interfaces created for the Cloud Run container. Use the [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags#restrictions) feature of VPC access connectors to control traffic to and from the service.",
              "$since": "0.1.0"
            }
          }
        }
      ],
      "$since": "0.1.0"
    },
    "cloudsql": {
      "type": "object",
      "description": "CloudSQL configuration for the Cloud Run service. If not provided, the service will not be connected to any CloudSQL instances.\n\n!!! info\n    Defining this will automatically inject a `CLOUD_SQL_CONNECTION` environment variable with the format `/cloudsql/project:region:instance`. Some libraries will automatically append the required `/.s.PGSQL.5432` suffix to connect to the [correct unix socket](https://cloud.google.com/sql/docs/postgres/connect-run#connect-unix-socket), while others do not. The environment variable is provided without the socket suffix.\n\n",
      "examples": [
        {
          "$title": "Direct CloudSQL Connection in same region",
          "instance": "my-instance",
          "project": "my-project"
        },
        {
          "$title": "Direct CloudSQL Connection in different region",
          "instance": "my-instance",
          "project": "my-project",
          "region": "europe-west1"
        }
      ],
      "required": [
        "instance",
        "project"
      ],
      "properties": {
        "instance": {
          "type": "string",
          "description": "CloudSQL instance name.",
          "examples": [
            "my-instance"
          ],
          "$since": "0.1.0"
        },
        "project": {
          "type": "string",
          "description": "CloudSQL project name.",
          "examples": [
            "my-project"
          ],
          "$since": "0.1.0"
        },
        "region": {
          "type": "string",
          "description": "CloudSQL region. Defaults to the region of the Cloud Run service.",
          "default": ".region",
          "examples": [
            "us-central1"
          ],
          "$since": "0.1.0"
        }
      },
      "$since": "0.1.0"
    },
    "disableInvokerIamPolicy": {
      "description": "Whether to [disable the invoker IAM policy](https://cloud.google.com/run/docs/securing/managing-access#disable_invoker) for the Cloud Run service. This is useful when using a VPC connector or direct VPC connection to avoid conflicts with the invoker IAM policy. Must be first requested via invite and is not generally available.",
      "type": "boolean",
      "default": false,
      "$since": "0.1.0"
    },
    "executionEnvironment": {
      "description": "The execution environment to use for the Cloud Run container.",
      "enum": [
        "gen2",
        "gen1"
      ],
      "default": "gen2",
      "type": "string",
      "examples": [
        "gen1"
      ],
      "$since": "0.1.0"
    },
    "launchStage": {
      "description": "The launch stage of the Cloud Run service. Controls feature availability.",
      "examples": [
        "GA"
      ],
      "default": "BETA",
      "enum": [
        "ALPHA",
        "BETA",
        "GA"
      ],
      "type": "string",
      "$since": "0.1.0"
    },
    "binaryAuthorization": {
      "description": "Whether to enforce Binary Authorization policy for this service.",
      "type": "boolean",
      "default": false,
      "examples": [
        true
      ],
      "$since": "0.1.0"
    },
    "encryption": {
      "description": "The KMS key to use for encrypting this service. Must be located in the same region and project as the Cloud Run service.",
      "type": "object",
      "required": [
        "key",
        "keyring"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "The KMS key to use for encrypting this service.",
          "$since": "0.1.0"
        },
        "keyring": {
          "type": "string",
          "description": "The KMS keyring where the key is stored.",
          "$since": "0.1.0"
        }
      },
      "examples": [
        {
          "key": "my-key",
          "keyring": "my-keyring"
        }
      ],
      "$since": "0.1.0"
    },
    "customAudiences": {
      "description": "Custom audiences to set in the generated ID token when using Identity Platform.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "examples": [
        [
          "https://example.com",
          "my-audience"
        ]
      ],
      "$since": "0.1.0"
    }
  },
  "$defs": {
    "probeProperties": {
      "type": "object",
      "properties": {
        "initialDelaySeconds": {
          "type": "integer",
          "default": 0,
          "description": "Number of seconds after the container starts before the probe is initiated",
          "$since": "0.1.0"
        },
        "periodSeconds": {
          "type": "integer",
          "default": 10,
          "description": "How often (in seconds) to perform the probe",
          "$since": "0.1.0"
        },
        "timeoutSeconds": {
          "type": "integer",
          "default": 1,
          "description": "Number of seconds after which the probe times out",
          "$since": "0.1.0"
        },
        "failureThreshold": {
          "type": "integer",
          "default": 3,
          "description": "Number of consecutive failures required to determine the container is not alive",
          "$since": "0.1.0"
        }
      }
    },
    "httpProbe": {
      "type": "object",
      "required": [
        "httpGet"
      ],
      "properties": {
        "httpGet": {
          "type": "object",
          "description": "HTTP health check configuration. If you are configuring your Cloud Run service for HTTP probes, you must also [add an endpoint](https://cloud.google.com/run/docs/configuring/healthchecks#healthcheck-endpoint) in your service code to respond to the probe. *Any response between 200 and 400 is a success, everything else indicates failure.*",
          "required": [
            "path"
          ],
          "examples": [
            {
              "path": "/health",
              "port": 8080,
              "httpHeaders": [
                {
                  "name": "X-Custom-Header",
                  "value": "my-value"
                }
              ]
            }
          ],
          "properties": {
            "path": {
              "type": [
                "string"
              ],
              "description": "Relative path to the HTTP endpoint, for example, /heatlh.",
              "$since": "0.1.0"
            },
            "port": {
              "type": [
                "integer"
              ],
              "default": 8080,
              "description": "Port to probe for HTTP health check. Should be set to the [container port](#containerPort) used for your service.",
              "$since": "0.1.0"
            },
            "httpHeaders": {
              "type": "array",
              "description": "HTTP headers can be used to supply multiple or repeated custom headers.",
              "items": {
                "type": "object",
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "$since": "0.1.0"
                  },
                  "value": {
                    "type": "string",
                    "$since": "0.1.0"
                  }
                }
              },
              "$since": "0.1.0"
            }
          },
          "$since": "0.1.0"
        }
      }
    },
    "tcpProbe": {
      "type": "object",
      "required": [
        "tcpSocket"
      ],
      "examples": [
        {
          "tcpSocket": {
            "port": 8080
          }
        }
      ],
      "properties": {
        "tcpSocket": {
          "type": "object",
          "description": "Probes if the container is listening on the specified port. Use the other health check options for more control.",
          "examples": [
            {
              "port": 8080
            }
          ],
          "required": [
            "port"
          ],
          "properties": {
            "port": {
              "type": "integer",
              "default": 8080,
              "description": "Port should be set to the [container port](#containerPort) used for your service.",
              "$since": "0.1.0"
            }
          },
          "$since": "0.1.0"
        }
      }
    },
    "grpcProbe": {
      "type": "object",
      "required": [
        "grpc"
      ],
      "properties": {
        "grpc": {
          "type": "object",
          "description": "If you are configuring a gRPC probe, you must also implement the [gRPC Health Checking protocol](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) in your Cloud Run service.",
          "examples": [
            {
              "port": 8080,
              "service": "my-service"
            }
          ],
          "required": [
            "port"
          ],
          "properties": {
            "port": {
              "type": "integer",
              "default": 8080,
              "description": "Port to probe for gRPC health check. Should be set to the [container port](#containerPort) used for your service.",
              "$since": "0.1.0"
            },
            "service": {
              "type": "string",
              "description": "If set, this is used in the service field of the `grpc.health.v1.HealthCheckRequest` when the `grpc.health.v1.Health.Check` rpc is called.",
              "$since": "0.1.0"
            }
          },
          "$since": "0.1.0"
        }
      }
    },
    "autoscalingProperties": {
      "type": "object",
      "examples": [
        {
          "$title": "Default",
          "minScale": 1,
          "maxScale": 100,
          "maxConcurrentRequests": 80,
          "timeoutSeconds": 60
        },
        {
          "$title": "Scale to zero",
          "minScale": 0,
          "maxScale": 100,
          "maxConcurrentRequests": 80,
          "timeoutSeconds": 120
        }
      ],
      "properties": {
        "minScale": {
          "default": 1,
          "description": "Minimum number of replicas to scale down to. 0 enables scale to zero.",
          "type": [
            "integer"
          ],
          "examples": [
            {
              "$title": "Default",
              "$value": 1
            },
            {
              "$title": "Scale to zero",
              "$value": 0
            }
          ],
          "$since": "0.1.0"
        },
        "maxScale": {
          "default": 100,
          "description": "Maximum number of replicas to scale up to.",
          "type": [
            "integer"
          ],
          "examples": [
            1
          ],
          "$since": "0.1.0"
        },
        "maxConcurrentRequests": {
          "default": 80,
          "description": "The number of concurrent requests per instance. Controls how many requests are processed before the autoscaler scales up. Setting this to 1 means 1 request per instance at a time.",
          "type": [
            "integer"
          ],
          "examples": [
            1
          ],
          "$since": "0.1.0"
        },
        "timeoutSeconds": {
          "default": 60,
          "description": "The maximum time the container will wait before responding with a 504 error. Especially important for startup times of newly spawned containers.",
          "type": [
            "integer"
          ],
          "examples": [
            120
          ],
          "$since": "0.1.0"
        }
      }
    },
    "imageProperties": {
      "description": "Container image to deploy. You can provide a direct reference to an image using a `string` or split up the inputs using the `object`.",
      "properties": {
        "name": {
          "description": "Container image name.",
          "type": [
            "string"
          ],
          "examples": [
            "my-image"
          ],
          "$since": "0.1.0"
        },
        "registry": {
          "description": "Container image registry.",
          "type": [
            "string"
          ],
          "examples": [
            "gcr.io"
          ],
          "$since": "0.1.0"
        },
        "repository": {
          "description": "Container image repository.",
          "type": [
            "string"
          ],
          "examples": [
            "gcr.io/my-project",
            "my-project # if used with a registry"
          ],
          "$since": "0.1.0"
        },
        "tag": {
          "description": "Container image tag.",
          "default": "latest",
          "type": [
            "string"
          ],
          "examples": [
            "latest",
            "@sha256:abc123",
            "1.0.0"
          ],
          "$since": "0.1.0"
        }
      },
      "required": [
        "repository",
        "name"
      ],
      "type": [
        "object",
        "string"
      ],
      "examples": [
        {
          "$title": "Direct image reference",
          "$value": "ghcr.io/my-org/my-image@sha256:abc123"
        },
        {
          "$title": "Split image reference",
          "repository": "ghcr.io/my-project",
          "name": "my-image"
        },
        {
          "$title": "Split image reference with tag and registry",
          "registry": "ghcr.io",
          "repository": "my-project",
          "name": "my-image",
          "tag": "1.0.0"
        }
      ]
    }
  }
}
